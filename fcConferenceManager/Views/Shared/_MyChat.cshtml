@model fcConferenceManager.Models.ViewModels.ChatViewModel

<script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
<script src="~/signalr/hubs"></script>

<audio id="NewPointsSound" style="display: none" src="/UserDocuments/sound/NewPointsSound.mp3"></audio>
<audio id="NewPointsSoundShort" style="display: none" src="/UserDocuments/sound/NewPointsSoundShort.mp3"></audio>
<audio id="NewLevelAttainedSound" style="display: none" src="/UserDocuments/sound/NewLevelAttainedSound.mp3"></audio>

@if (Model.ChatEnabled)
{
    @*<link href="Images/lib/css/emoji.css" rel="stylesheet" />*@
    <style>
        #ulChatListLeftPanel li
        {
            cursor: pointer;
        }

        #lbltxtPhrasedisplay
        {
            float: right;
            font-size: 11px;
            padding: 0;
            margin-top: -5px;
            height: 17px !important;
        }

        p.lead
        {
            margin-bottom: 0 !important;
            width: 100%;
        }

        div.modal-dialog.magi-chat-main-wapper
        {
            top: 10px !important;
        }

        #dvShowTypingHere
        {
            visibility: hidden;
            min-height: 22px;
        }

        .magi-three-col-chat-wapper
        {
            border: 2px solid #ccc;
        }

        .cursorAsPointer
        {
            cursor: pointer;
        }

        .notifyMsgDiv
        {
            text-align: center;
            padding: 40px;
        }

        @@media(min-width:768px)
        {
            .magi-three-col-chat-wapper > div:not(:last-child)
            {
                border-right: 2px solid #ccc;
            }
        }

        .magi-chat-section-title-wrapper
        {
            background-color: #87cefa;
            padding: 0.5rem 1rem;
            min-height: 51px;
        }

        span.magi-chat-section-title
        {
            display: block;
            font-weight: 700;
            color: #283da4;
        }

        .magi-chat-user-icon
        {
            min-width: 40px;
            display: block;
            height: 45px;
            width: 45px;
            position: relative;
        }

        span.magi-chat-user-image
        {
            border-radius: 100%;
            display: block;
            overflow: hidden;
            width: 100%;
            height: 100%;
        }

        img.magi-connection-type
        {
            width: 20px !important;
            height: 20px !important;
            position: absolute;
            top: 0;
            right: -10px;
        }

        span.magi-chat-user-online
        {
            display: block;
            width: 10px;
            height: 10px;
            background-color: #34fc07;
            border-radius: 100%;
            position: absolute;
            right: 0;
            bottom: 0.2rem;
        }

        span.magi-chat-user-icon img
        {
            object-fit: contain;
        }

        span.magi-chat-user-name
        {
            font-size: 0.8rem;
            font-weight: 500;
        }

        .active-item
        {
            background-color: aquamarine;
        }

        ul.magi-chat-user-list li a
        {
            text-decoration: none;
            color: #000;
            position: relative;
        }

        span.magi-chat-user-text-wapper
        {
            display: block;
            background-color: #d7f6f9;
            position: relative;
            border-radius: 5px;
            filter: drop-shadow(0 1px 1px #00000054);
        }

        span.magi-chat-list-user-name
        {
            font-weight: 600;
            color: #283da4;
            display: block;
            text-transform: uppercase;
            font-size: 0.7rem;
            margin-bottom: 0.5rem;
        }

        span.magi-chat-user-text
        {
            display: block;
            margin-bottom: 0.5rem;
        }

        small.magi-chat-user-msg-time
        {
            font-weight: 500;
            font-size: 0.6rem !important;
            display: block;
        }

        span.magi-chat-user-text-wapper:after
        {
            content: "";
            display: inline-block;
            position: absolute;
            top: 0;
            left: -19px;
            border-width: 20px;
            border-style: solid;
            border-color: #d7f6f9 transparent transparent;
        }

        .magi-group-chat-list .flex-row-reverse .flex-grow-1
        {
            margin-right: 3rem;
        }

        .magi-group-chat-list li.d-flex.justify-content-between.p-2:not(.flex-row-reverse ) .flex-grow-1
        {
            margin-left: 3rem;
        }

        .magi-group-chat-list .flex-row-reverse .flex-grow-1:after
        {
            left: auto;
            right: -19px;
        }

        .magi-chat-typing-wapper
        {
            background-color: #ececec;
            padding: 0.7rem 1.5rem;
            padding-bottom: 1.8rem;
        }

        .magi-chat-typing-wapper form input[type="text"]
        {
            outline: none;
            font-size: 12px;
            border: 1px solid #7d7d7d;
            background-color: #fff;
            border-radius: 10px;
            padding: 0.7rem 2.5rem 0.7rem 1.5rem;
        }

        .magi-chat-typing-wapper .emoji-wysiwyg-editor
        {
            outline: none;
            font-size: 12px;
            border: 1px solid #7d7d7d;
            background-color: #fff;
            border-radius: 10px;
            padding: 0.7rem 2.5rem 0.7rem 1.5rem;
            height: auto !important;
        }

        .magi-chat-typing-wapper .emoji-picker-icon
        {
            top: 50%;
            transform: translateY(-50%);
        }

        .magi-chat-typing-wapper form input[type="button"]
        {
            background: url(/Images/Icons/sendIcon.png) no-repeat center center/20px #009bfb;
            font-size: 0;
            border-radius: 50%;
            cursor: pointer;
            height: 35px;
            width: 35px !important;
            border: blanchedalmond;
            min-width: 35px;
            margin-left: 1rem;
        }

        .magi-group-chat-list ul
        {
            max-height: 270px;
            overflow-y: auto;
            height: 270px;
        }

        .magi-chat-main-wapper .modal-body
        {
            padding: 0;
        }

        .magiSrollbar::-webkit-scrollbar
        {
            width: 10px;
        }

        .magi-chat-user-list
        {
            max-height: 366px;
            height: 100%;
            overflow-y: scroll;
        }

        .magi-chat h4
        {
            font-size: 1rem;
            color: #283da4;
        }

        .rapid-fire
        {
            background: red;
            color: #fff;
            border-color: red;
        }

        .magi-chat-main-wapper
        {
            max-width: 1000px;
        }

        button.magi-chat-msg-icon
        {
            border: none;
            width: 60px;
            border-radius: 50%;
            display: inline-block;
            z-index: 999;
            padding: 0 !important;
            background-color: transparent;
            outline: none;
            position: relative;
        }

        button.magi-chat-msg-icon:active
        {
            top: inherit;
        }

        .ancImg, .clsAvatarSndr
        {
            display: inline-block;
            height: 45px;
            width: 45px;
            background-size: cover !important;
            background-repeat: no-repeat !important;
            background-position: center center !important;
            border-radius: 100%;
        }

        .showConnectionInfoOnTop
        {
            position: absolute;
            left: 32px;
            top: -6px;
        }

        div.modal-dialog.magi-chat-main-wapper
        {
            max-width: 730px;
            height: 580px;
            top: 40px;
        }

        ul#ulChatListLeftPanel li a
        {
            cursor: pointer;
        }

        span.magi-chat-typing-msg
        {
            width: 105% !important;
            display: inline-block;
        }

        div.magi-chat-typing-wapper .emoji-wysiwyg-editor
        {
            max-height: 40px;
        }

        .magi-chat-typing-wapper .emoji-wysiwyg-editor::-webkit-scrollbar
        {
            display: none;
        }

        .magi-chat-typing-wapper .emoji-wysiwyg-editor
        {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }

        #icon-cover
        {
            display: none;
        }

        .magi-pointers a
        {
            cursor: pointer;
        }

        #icon-cover
        {
            position: fixed !important;
            bottom: 2rem;
            left: 2rem;
            z-index: 9999999999;
            background: #ccc;
            width: 60px;
            height: 55px;
            border-radius: 100%;
        }

        #btnCloseChatForAll
        {
            width: 25px;
            position: absolute;
            right: -13px;
        }

        #windowForPhrases, #windowForBIO
        {
            z-index: 9999999999;
        }

        div#tableOfPhrases::-webkit-scrollbar
        {
            display: none;
        }

        #btnSavePhrase
        {
            background-color: yellow;
            border: 1px black solid;
            height: 28px;
            border-radius: 3px;
            top: 0;
        }

        .clsNewOne
        {
            background: red;
            color: white;
            border-radius: 67%;
            height: 12px;
            width: 12px;
            font-family: sans-serif;
            position: absolute;
            text-align: center;
            display: none;
            z-index: 999999;
            top: 4px;
            left: 10px;
        }

        #bioImg
        {
            width: 200px;
            height: 200px;
            background-image: url(/accountimages/PicGallary/20200805190010.jpg);
            display: inline-block;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            border-radius: 5px;
        }

        span#MainHeaderOfChat span.magiChatIcons input
        {
            margin-left: 5px;
        }
    </style>

    <div id="icon-cover">
        <input id="btnCloseChatForAll" type="image" onclick="return false;" src="/Images/Icons/cross.png" alt="close" title="close">
        <button id="messengerAction" class="magi-chat-msg-icon" data-toggle="modal" data-bs-toggle="modal" data-bs-target="#exampleModal">
            <span class="clsNewOne" title="New message arrived"></span>
            <img src="/Images/Icons/msgIcon.png" alt="messenger icon" />
        </button>
    </div>

    <!-------SOME SOUNDS AND HIDDEN VALUES STARTS HERE------------>
    <input type="hidden" id="hclsAvatarSndr" />
    <input type="hidden" id="hPageReceiverID" />
    <input type="hidden" id="hChatType" />
    <input type="hidden" id="htargetNick" />
    <input type="hidden" id="hclsAvatarSndr" />
    <input type="hidden" id="hIsDemo" value="@(Model.IsDemo ? 1 : 0)" />
    <input type="hidden" id="hdnForEventOrganizationkey" />

    <audio id="playWavSound" style="display: none" src="/UserDocuments/sound/beep.mp3"></audio>
    <!-------SOME SOUNDS AND HIDDEN VALUES ENDS HERE-------------->

    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog magi-chat-main-wapper" role="document">
            <div class="modal-content">
                <div class="modal-header border-0" style=" background-color: #fff !important; padding: 0px !important;">
                    <h4 class="magi-chat-title" style="font-size: 1rem;">My Open Chats</h4>
                    <label id="closeIframeVideo" class="pull-right  float-end mb-2" data-bs-dismiss="modal" aria-label="Close" style="cursor:pointer;float:right"><i class="fa fa-close"></i></label>
                </div>
                <div class="modal-body">

                    <div class="magi-chat">
                        <div class="align-items-start d-flex justify-content-between mb-2">
                            <div>
                                @{
                                    string[] strArr = Model.NetworkingLevelDetails[0].Split('^');
                                    foreach (string s in strArr)
                                    {
                                        <p class="mb-0" style="font-size: 14px;">@s</p>
                                    }
                                }
                            </div>
                            <div>
                                <img id="imgYourNetworkingBadge" src="@Model.NetworkingLevelDetails[1]" alt="badges" title="@Model.NetworkingLevelDetails[2]" />
                            </div>
                        </div>

                        @*<div class="d-none d-md-flex justify-content-between align-items-center">
                                <div>
                                    <div class="d-flex align-items-center">
                                        <button class="btn rapid-fire ">
                                            Rapid Fire
                                        </button>
                                        <div class="ms-md-4 ms-1 d-flex align-items-center">
                                            <span>
                                                Networking Progress:
                                            </span>
                                            <progress class="ms-2" value="32" max="100"></progress>
                                        </div>
                                    </div>
                                    <div>
                                        <strong>
                                            Networking Level:
                                        </strong>
                                        Amateur Networker (11 points, 4 required for next level) 7 people are at next level

                                    </div>
                                </div>
                                <div>
                                    <img src="https://magiweb-qa.azurewebsites.net/images/icons/Amateur.png" alt="" width="40">
                                </div>
                            </div>*@

                        <div class="magi-three-col-chat-wapper row no-gutters g-0">
                            <div class="col-md-4 d-md-block d-none">
                                <div class="magi-chat-section-title-wrapper d-flex align-items-center">
                                    <span class="magi-chat-section-title">
                                        Recents Chats
                                    </span>
                                </div>
                                <div id="leftPanel">
                                    <ul id="ulChatListLeftPanel" class="magi-chat-user-list list-unstyled magiSrollbar m-0"></ul>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="magi-chat-section-title-wrapper d-flex align-items-center justify-content-between">
                                    <span id="topMainSender" class="magi-chat-section-title">
                                    </span>
                                    <span id="MainHeaderOfChat" class="magi-chat-header-icons align-items-center d-flex magi-chat-header-icons magi-pointers">
                                        <a class="d-block">
                                            <img src="/Images/Icons/bio.png" width="24" alt="Bio" onclick="showBioForThisPerson(); return false;">
                                        </a>

                                        <span id="dvForConnect" class="magiChatConnectIcon magiChatIcons">
                                        </span>
                                        <span id="dvForTHunt" class="magiChatThuntIcon magiChatIcons">
                                        </span>
                                        <span id="dvForAccecpt" class="magiChatAccecptIcon magiChatIcons">
                                        </span>
                                        <span id="dvForReject" class="magiChatRejectIcon magiChatIcons">
                                        </span>
                                        <span id="dvForMeet" class="magiChatRejectIcon magiChatIcons">
                                        </span>

                                        <a href="" class="ms-2 d-block">
                                            <img src="/Images/Icons/PhrasesIcon.png" width="24" alt="Text shortcuts" onclick="showPhrases(); return false;">
                                        </a>
                                        <a id="btnCloseChat" class="ms-2 d-block" onclick="return closeThisChat();">
                                            <img src="/Images/Icons/CloseChat.png" alt="">
                                        </a>
                                    </span>
                                </div>
                                <div class="magi-group-chat-list">
                                    <ul id="msgList" class="list-unstyled m-0 magiSrollbar">
                                    </ul>
                                    <div class="magi-chat-typing-wapper">
                                        <form class="d-flex align-items-center">
                                            <p class="lead">
                                                <input id="message" type="text" placeholder="Type Here your Message...">
                                            </p>
                                            <input id="sendmessage" type="button" value="Send">
                                        </form>
                                        <span class="magi-chat-typing-msg smallFont">
                                            When requesting a connection, introduce yourself and give a reason for the connection.
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div id="ulShowFBFriends" class="col-md-3 d-none">
                                <div class="magi-chat-section-title-wrapper d-flex align-items-center">
                                    <span class="magi-chat-section-title">
                                        Suggested Contacts
                                    </span>
                                </div>
                                <ul class="magi-chat-user-list list-unstyled magiSrollbar m-0">
                                </ul>
                            </div>
                        </div>
                    </div>

                </div>

            </div>
        </div>
    </div>

    <div class="modal fade" id="windowForPhrases" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-centered" style="min-width:650px">
            <div class="modal-content">
                <div class="modal-header modalBlueHeader rounded-0">
                    <h5 class="modal-title" style="color:black">My Phrase Shortcuts</h5>
                    <div>
                        <input type="button" id="btnSavePhrase" value="Save" onclick="ClientSavePhrases();" class="btnSmall" />
                        <input type="button" value="Close" data-bs-dismiss="modal" aria-label="Close" />
                        <input type="hidden" id="hdnID" />
                        <input type="hidden" id="hdnGlobalPhrsID" />
                        <input type="hidden" id="hdnUpdatedPhrases" />
                    </div>
                </div>
                <div class="modal-body" style="margin-top: 0 !important; padding-top: 0 !important;">
                    <div class="row">
                        <div class="col-md-12 mt-2">
                            <p style="padding: 0;margin: 0;font-size: 12px;text-align: center;">
                                Insert phrases by clicking the icon or typing after forward slash and then space, e.g., /text[space].
                            </p>
                        </div>

                        <div class="col-md-12 mt-2" style="margin:0 !important;">
                            <span class="lblSmall">Code:</span>
                            <input id="txtKey" class="input-sm txtRequired Font11" type="text" />
                        </div>

                        <div class="col-md-12 mt-2">
                            <span class="lblSmall">Phrase:</span>
                            <textarea id="txtPhraseText" class="txtRequired Font11" onkeyup="characterCounterForPhrases();" onkeydown="characterCounterForPhrases();"
                                      rows="4" type="text" min="0" maxlength="1000"></textarea>
                            <label id="lbltxtPhrasedisplay">&nbsp;</label>
                        </div>
                        <div id="tableOfPhrases" class="col-md-12 mt-2" style="margin-top: 0 !important;max-height: 260px;overflow-y: auto;">
                            <table id="MyPhrases" class="table table-sm magi-table">
                                <thead style="cursor: pointer; position: sticky; top: 0;">
                                    <tr>
                                        <th width="8%">Edit</th>
                                        <th width="10%">Code</th>
                                        <th width="62%">Phrase</th>
                                        <th width="10%">Insert</th>
                                        <th width="10%">Delete</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="windowForBIO" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-centered" style="min-width:800px">
            <div class="modal-content">
                <div class="modal-header modalBlueHeader rounded-0">
                    <h5 id="hBioHeader" class="modal-title" style="color:black"></h5>
                    <div>
                        <input type="button" value="Close" data-bs-dismiss="modal" aria-label="Close" />
                    </div>
                </div>
                <div class="modal-body" style="margin-top: 0 !important; padding-top: 0 !important;">
                    <div class="row">
                        <div class="col-md-4 mt-2">
                            <div id="bioImg" class="Rounded Shadow"></div>
                        </div>
                        <div class="col-md-8 mt-2">
                            <div>
                                <table>
                                    <tbody>
                                        <tr>
                                            <td style="width: 150px;">Job Title:</td>
                                            <td>
                                                <p id="bioJobTitle" style="margin: 0"></p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="width: 150px;">Organization:</td>
                                            <td>
                                                <p id="bioOrg" style="margin: 0"></p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="width: 150px; vertical-align: top">Location:</td>
                                            <td>
                                                <p id="bioLocation" style="margin: 0"></p>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="width: 150px; vertical-align: top">Connection Status:</td>
                                            <td>
                                                <p id="lblConnectionStatus" style="margin: 0"></p>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>

                            <div style="display: inline-block; width: 100%;">
                                <p id="txtBio"></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="windowForCreateMeeting" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-centered" style="min-width:800px">
            <div class="modal-content">
                <div class="modal-header modalBlueHeader rounded-0">
                    <h5 id="hBioHeader" class="modal-title" style="color:black">Invite to Meeting</h5>
                    <div>
                        <input type="button" id="cmdMeetingSave" value="Create Meeting"
                               CssClass="btnSmall" OnClick="cmdMeetingSave_Click();" />
                        <input type="button" value="Close" data-bs-dismiss="modal" aria-label="Close" />
                    </div>
                </div>
                <div class="modal-body" style="margin-top: 0 !important; padding-top: 0 !important;">
                    <div class="row">
                        <div class="col-md-12 mt-2">

                            <table width="100%" style="vertical-align: top; white-space: nowrap">
                                <tr>

                                    <td colspan="2" style="vertical-align: top">

                                        <table width="80%">
                                            <tr>
                                                <td width="20%" style="vertical-align: top">
                                                    <span class="lblSmall">Meeting Date:</span>
                                                    <br />
                                                    <telerik:RadDropDownList ID="ddRowDate" runat="server" Width="100px" Skin="Metro" DropDownWidth="100px" CssClass="Font10" />
                                                    &nbsp;
                                                    <telerik:RadTimePicker runat="server" ID="txtRowStart" Skin="Metro" AutoPostBack="false" Width="100px" Style="display: none"></telerik:RadTimePicker>
                                                    &nbsp;
                                                    <telerik:RadTimePicker runat="server" ID="txtRowEnd" Skin="Metro" AutoPostBack="false" Width="100px" Style="display: none;">
                                                        <TimeView Skin="Default" ShowHeader="False"
                                                                  StartTime="08:00:00"
                                                                  Interval="00:05:00"
                                                                  EndTime="18:00:00"
                                                                  Columns="8">
                                                        </TimeView>
                                                    </telerik:RadTimePicker>
                                                </td>
                                                <td width="10%" style="vertical-align: top">
                                                    <span class="lblSmall">Start Time:</span>
                                                    <br />
                                                    <telerik:RadDropDownList ID="ddRowStart" runat="server" Width="50px" Skin="Metro" DropDownWidth="50px" CssClass="Font10" />

                                                </td>
                                                <td width="10%" style="vertical-align: top">
                                                    <br />
                                                    <telerik:RadDropDownList ID="ddRowEnd" runat="server" Width="50px" Skin="Metro" DropDownWidth="50px" CssClass="Font10" />
                                                </td>
                                                <td width="10%" style="vertical-align: top">
                                                    <asp:Label ID="Label13" runat="server" Text="" CssClass="lblSmall"></asp:Label>
                                                    <br />
                                                    <telerik:RadDropDownList ID="rdAmPm" runat="server" Width="50px" Skin="Metro" DropDownWidth="50px" CssClass="Font10">
                                                        <Items>
                                                            <telerik:DropDownListItem runat="server" Text="AM" Value="1" />
                                                            <telerik:DropDownListItem runat="server" Text="PM" Value="2" />
                                                        </Items>
                                                    </telerik:RadDropDownList>
                                                </td>
                                                <td width="10%" style="vertical-align: top">
                                                    <asp:Label ID="Label12" runat="server" Text="Duration (Minutes):" CssClass="lblSmall"></asp:Label>
                                                    <br />
                                                    <telerik:RadTextBox ID="txtDuration" runat="server" Text="45" Width="50px" CssClass="Font11">
                                                        <ClientEvents OnValueChanging="LimitOptions" OnKeyPress="keyPress" />

                                                    </telerik:RadTextBox>
                                                </td>
                                            </tr>

                                            <tr>
                                                <td style="vertical-align: top" colspan="5">

                                                    <asp:TextBox ID="txtAddress" runat="server" Width="97%" Style="display: none" CssClass="Font11 asp_textbox"></asp:TextBox>

                                                </td>
                                            </tr>
                                        </table>
                                    </td>


                                </tr>
                                <tr>
                                    <td style="vertical-align: top">
                                        <asp:Label ID="lblMeeting" runat="server" Text="Topic:" CssClass="lblSmall"></asp:Label>
                                        <br />
                                        <telerik:RadTextBox ID="txtTitle" Text="" runat="server" MaxLength="50" Width="99%" CssClass="Font11" />
                                    </td>
                                </tr>
                                <tr>
                                    <td style="vertical-align: top">
                                        <asp:Label ID="Label60" runat="server" Text="Comments:" CssClass="lblSmall"></asp:Label>
                                        <br />
                                        <telerik:RadTextBox ID="txtMeetingPurpose" runat="server" TextMode="MultiLine" MaxLength="300" Width="99%" Height="65px" CssClass="Font11"
                                                            onkeydown="characterCounter(this,0);" onkeyup="characterCounter(this,0);" />
                                        <br />
                                        <div style="text-align: right">
                                            <asp:Label ID="lblCount" runat="server" CssClass="lblSmall" Style="color: blue"></asp:Label>
                                        </div>
                                    </td>
                                </tr>

                                <tr>
                            </table>



                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>






    <script src="~/Images/lib/js/config.js"></script>
    <script src="~/Images/lib/js/util.js"></script>
    @*<script src="~/Images/lib/js/jquery.emojiarea.js"></script>
        <script src="~/Images/lib/js/emoji-picker.js"></script>*@

<script type="text/javascript">
        var chat = $.connection.chatHub;
        var clsAvatarRv = '';
        var conversations = [];
        var initialStg = true;
        var currIP = '';
        var fbScrollConstant = 0;
        var fbScroll;
        var callForFB = false;
        var showFBagain;
        var msgStack = [];
        var chatAvailable = false;
        var rapidChatList = [];
        var aRandomNumber = 0;
        var nickAdded = false;
        var crisisRaisedBy = 0;
        var crisisThread = '';

        var infoAboutRecentChats = [];
        var inMingle = false;

        var asInlineBlock = { 'display': 'inline-block' };
        var asBlock = { 'display': 'block' };
        var dontShow = { 'display': 'none' };

        $(window).focus(function ()
        {
            document.title = 'MAGI';
        });

        $(function ()
        {
            // Initializes and creates emoji set from sprite sheet
            //window.emojiPicker = new EmojiPicker({
            //    emojiable_selector: '#message',
            //    assetsPath: '/Images/lib/img/',
            //    popupButtonClasses: 'fa fa-smile-o'
            //});
            //window.emojiPicker.discover();

            $('.magiChatIcon').click(function ()
            {
                $('.magiChattingRightWrapper').toggleClass('active');
            });
            $('.magiChatCloseBtn').click(function ()
            {
                $('.magiChattingRightWrapper').removeClass('active');
            });
        });

        $(document).ready(function ()
        {
            clearEveryThing();
            addMessageEventListeners();

            if (location.pathname.toUpperCase().includes('MYCONSOLE'))
            {
                var keyVal = GetValueByQueryString("PK");
                var keyValSecondary = GetValueByQueryString("Evt_ORG_pkey");
                if (keyVal != null && keyVal != '')
                {
                    $('#hdnForEventOrganizationkey').val(keyVal);
                }
                else if (keyValSecondary != null && keyValSecondary != '')
                {
                    $('#hdnForEventOrganizationkey').val(keyValSecondary);
                }
            }

            $('#messengerAction').on('click', function ()
            {
                setCookieForChat("chatopened", "1");
                scrollToBottom();
                offAnimate();
                setNewToTop();
                setCookieForChat("newMsg", "0");
            });

            $('#exampleModal').on('shown.bs.modal', function (e)
            {
                scrollToBottom();
            });

            $('#btnCloseChatForAll').on('click', function ()
            {
                $('#icon-cover').css('display', 'none');
            });

            $("form input").on('keypress', function (e)
            {
                var prop = $("#exampleModal").css('display');
                if (prop == 'block')
                {
                    if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13))
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
            });

            $(document).on('keypress', function (e)
            {
                var prop = $('#dvAdminNotification').css('display');
                if (prop == 'block')
                {
                    $('#dvAdminNotification').fadeOut(300);
                }
            });

            chat.client.confirmationForChatToTarget = function (requesterID, requesterName)
            {
                try
                {
                    alertify.confirm(requesterName + ' want to chat with you', function (e)
                    {
                        if (e)
                        {
                            if (typeof OpenMyChat === 'function')
                            {
                                OpenMyChat(requesterID, requesterName, 1, 1);
                            }
                        }
                    });
                    $('#alertify-ok').html('Allow');
                    $('#alertify-cancel').html('Decline').css({ 'float': 'right', 'background': 'silver' });
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.showRapidPeople = function (rpdPeople)
            {
                try
                {
                    if (IsNotUndefinedAndAlsoNotNull(rpdPeople) && rpdPeople.length > 0 && rpdPeople[0].Table.length > 0)
                    {
                        $(rpdPeople[0].Table).each(function (i, o)
                        {
                            var userID = o.ID;
                            var userName = o.name;
                            var userImage = o.image;
                            var conStatusNow = o.conStatusNow;
                            var fromMe = o.fromMe;
                            var refusedByOwn = o.refusedByOwn;
                            var isExpired = o.isExpired;

                            appendToListIfNotThere(userID, userName, userImage, '', 1, '', '', '', 1, conStatusNow, fromMe, refusedByOwn, isExpired);
                        });

                        updateConnectionIconsOfList();
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                }
                showListOverlay(false);
            }

            chat.client.updateEventAttendeeStatus = function (targetID, isEventSponsor)
            {
                $('#ulChatListLeftPanel li a[dataid="' + targetID + '"]').attr("isEventSponsor", isEventSponsor);
            }

            chat.client.addToRapidPeopleList = function (rpdPeople)
            {
                try
                {
                    if (IsNotUndefinedAndAlsoNotNull(rpdPeople) && rpdPeople.length > 0 && rpdPeople[0].Table.length > 0)
                    {
                        rapidChatList = [];
                        $(rpdPeople[0].Table).each(function (i, o)
                        {
                            rapidChatList.push(o);
                        });

                        aRandomNumber = getRandomInt(rapidChatList.length);
                        SetDataWithObjForRF(rapidChatList[aRandomNumber]);
                    }
                    else
                    {
                        alertify.alert('Currently, no person available for this feature.');
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                    alertify.alert('Currently, no person available for this feature.');
                }
                RapidFireSplash(false);
            }

            chat.client.setInSessionByBroadcast = function (val)
            {
                $('#hValueForSession').val(val);
            }

            chat.client.addToInfoList = function (infoObjext)
            {
                if (infoObjext.length > 0)
                {
                    var objectForInfoAboutRecentChats =
                    {
                        ID: infoObjext[0].ID,
                        name: infoObjext[0].nm,
                        img: infoObjext[0].img.replace('~', ''),
                        JobTitle: infoObjext[0].title,
                        bio: infoObjext[0].bio,
                        dept: infoObjext[0].dept,
                        org: infoObjext[0].org
                    };
                    infoAboutRecentChats.push(objectForInfoAboutRecentChats);
                    addEventListenerForShowingInfo();
                }
            }

            //HR this need to fix
            chat.client.replaceSentinels = function (msg, targetName, senderImage, nickName)
            {
                try
                {
                    //HR
                    //$('#<%=hdnmsg.ClientID%>').val(msg);
                    //$('#<%=hdntargetName.ClientID%>').val(targetName);
                    //$('#<%=hdnsenderImage.ClientID%>').val(senderImage);
                    //$('#<%=hdnnickName.ClientID%>').val(nickName);

                    //$('#<%=btnReplaceSentinels.ClientID%>').click();
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.bindMinglers = function (mingleData)
            {
                try
                {
                    if (IsNotUndefinedAndAlsoNotNull(mingleData) && mingleData.length > 0 && mingleData[0].Table.length > 0)
                    {
                        $(mingleData[0].Table).each(function (i, o)
                        {
                            var userID = o.userId;
                            var userName = o.name;
                            var userImage = o.image;

                            appendToListIfNotThere(userID, userName, userImage, '', 1, '', '', '', 1, 0, 0, 0, 0);
                        });
                    }
                    else
                        alertify.alert('Please wait for the next person to join you.');
                }
                catch (ex)
                {
                    console.log(ex);
                }
                showListOverlay(false);
            }

            chat.client.adminBroadcast = function (strMsg, bKey)
            {
                var intAccKey = parseInt(getSelfConnectionId());
                if (intAccKey > 0)
                {
                    $('#dvAdminNotification').fadeIn(300);
                    $('#txtBroadCardMsg').html(strMsg);
                    ///////////Acknoledge Back to DB
                    chat.server.broadcastAcknoledged(getSelfConnectionId(), bKey);
                }
            }

            chat.client.crisisAlertOnClient = function (strTitle, strBody, didBy, crThread, crKey, replied)
            {
                var intAccKey = parseInt(getSelfConnectionId());
                if (intAccKey > 0)
                {
                    $('#dvCrisisNotification').fadeIn(300);

                    if (replied == 1)
                        $('#titleForTheCrisis').html(strTitle);
                    else
                        $('#titleForTheCrisis').html('CRISIS ALERT' + (isNotNullAndEmpty(strTitle) ? '(' + strTitle + ')' : ''));

                    $('#txtCrisisMsg').html(strBody);

                    if (isNotNullAndEmpty(crisisThread) && crisisThread != crThread)
                    {
                        $('#btnReplyToAll, #btnReplyToSender').slideUp(300);
                        $('#btnReplyToCrisis').slideDown(300);
                    }
                    crisisRaisedBy = didBy;
                    crisisThread = crThread;
                    ///////////Acknoledge Back to DB
                    chat.server.crisisAcknoledged(getSelfConnectionId(), crKey);
                }
            }

            chat.client.openThisSessionForAll = function (sessionID)
            {
                if (location.pathname.toUpperCase().includes('VIEWMYSCHEDULE'))
                {
                    try
                    {
                        var path = 'virtualevent.aspx?ESPK=' + $('div[data-session=' + sessionID + ']').attr('data-key').toString();
                        var btnJoinSession = $('<input/>', {
                            type: 'image',
                            title: 'Attend session',
                            alt: 'Attend session',
                            src: '../images/icons/laptop.jpg',
                            class: 'animateClass',
                            style: 'Vertical-align:middle;width:16px;height:16px',
                            onclick: 'redirectTo("' + path + '");'
                        });

                        $('div[data-session=' + sessionID + '] input').remove();
                        $('div[data-session=' + sessionID + ']').append(btnJoinSession);
                    }
                    catch (ex)
                    {
                        console.log(ex);
                    }
                }
            }

            chat.client.showOrHideFBList = function (fbData)
            {
                var fbDesign = '';
                $(fbData).each(function (i, o)
                {
                    fbDesign += '<li dataid="' + o.id + '" dataimg="' + ((o.image == null || o.image == '') ? '' : o.image.replace('~', ''))
                        + '" dataname="' + o.name + '" datatitle="' + o.title + '" databio="' + o.bio + '" datadept="'
                        + o.dept + '" dataorg="' + o.org + '" isonline="' + o.isOnline + '">' +
                        +'<a class="d-flex align-items-center px-3 py-2">' +
                        +'<span class="clsNewOne" title="New message arrived"></span>'+
                        +'<span class="magi-chat-user-icon">' +
                        +'<span class="magi-chat-user-image">' +
                        +'<img src="' + ((o.image == null || o.image == '') ? '' : o.image.replace('~', '')) + '" alt="User Image">' +
                        +'</span>' +
                        +'</span>' +
                        +'<span class="magi-chat-user-name ps-3">' + o.name + '</span>' +
                        +'</a>' +
                        +'</li>' +
                        '</li>';
                });

                if (fbDesign != '')
                {
                    $("ul#ulShowFBFriends").empty().append(fbDesign);
                    $('ul#ulShowFBFriends li').on('click', function ()
                    {
                        if (getOptOut())
                            return;

                        var id = $(this).attr('dataId');
                        var name = $(this).attr('dataname');
                        OpenChat(id, name, 1);
                        $(this).appendTo('ul#ulShowFBFriends');
                        return false;
                    });

                    $('ul#ulShowFBFriends li').on('mouseenter', function (event)
                    {
                        setAndShow(this, true, event, false);
                    });

                    $('ul#ulShowFBFriends li').on('mouseleave', function ()
                    {
                        setAndShow(null, false, event, false);
                    });

                    clearTimeout(fbScroll);
                    fbScroll = setTimeout(function () { keepScrolling(); }, 5000);
                    setpositionAndshow();
                }
            }

            chat.client.setInstantPerson = function (changer)
            {
                $('#hInstantConnect').val(changer);
            }

            chat.client.sendAsync = function (receiverId, name, ImagRv, message, ChatType, UniqueID, grpName, nick = '', dateOfMsg = '')
            {
                //if (ChatType == 2)      //////Later we will remove this
                //    return;

                var selfConnectionID = getSelfConnectionId();


                if (getOptOut())
                    return;

                if (receiverId == selfConnectionID || viewingOthersChat())
                    return;

                var date = (dateOfMsg == '' ? formatAMPM(new Date()) : dateOfMsg);
                if (typeof pauseChat !== "undefined" && pauseChat == true)
                {
                    var msgObject = { receiverId: receiverId, name: name, ImagRv: ImagRv, message: message, ChatType: ChatType, UniqueID: UniqueID, grpName: grpName, nick: nick, dateOfMsg: date };
                    msgStack.push(msgObject);
                    return;
                }

                if ((ChatType == 2) && (typeof chatVE !== "undefined") && (typeof chatVE.client.sendAsyncForVE === 'function'))
                {
                    chatVE.client.sendAsyncForVE(receiverId, name, ImagRv, message, ChatType, UniqueID, grpName, nick);
                    return;
                }

                var sound = false;
                var insession = getInSession();

                if (ChatType == 1)
                {
                    appendLeftPanel(receiverId, name, null, ChatType, true, nick, ImagRv);
                }
                else if (ChatType == 2)
                {
                    appendLeftPanel(receiverId, grpName, null, ChatType, true, "", ImagRv);
                }

                var prop = $("#exampleModal").css('display');

                if (prop != 'block')
                {
                    $('#' + receiverId + '_' + ChatType).click();

                    animateNewMsg();
                    $('#icon-cover').css('display', 'inline-block');
                    if (insession == '1')
                    {
                        setCookieForChat("newMsg", "1");
                    }
                    else
                    {
                        sound = true;
                        if (!(typeof chatVE !== "undefined"))
                        {
                            setTimeout(function ()
                            {
                                opentheChat();
                                offAnimate();
                                scrollToBottom();
                            }, 3000);
                        }
                    }
                }

                var htmlTextMsg =
                    '<li class="d-flex justify-content-between p-2">' +
                    '<span class="magi-chat-user-icon">' +
                    '<span class="magi-chat-user-image clsAvatarSndr" style="background-image: url(' + ImagRv + ');">' +
                    '</span>' +
                    '</span>' +
                    '<span class="magi-chat-user-text-wapper p-3 flex-grow-1">' +
                    '<span class="magi-chat-list-user-name">' + name + '</span>' +
                    '<span class="magi-chat-user-text">' + message + '</span>' +
                    '<small class="magi-chat-user-msg-time"><b id=' + UniqueID + ' style="font-size: 11px;margin-right: 10px;"></b>' + date + '</small>' +
                    '</span>' +
                    '</li>';

                var recievedMsg = {
                    MsgType: 0, strMsg: message, name: name, img: ImagRv, mid: UniqueID, msgSt: 0, mine: false, ak: false, timeOfMsg: date
                };

                var myself = getSelfConnectionId();
                var currentReciever = getReceiverId();
                if ((currentReciever == '') || (currentReciever == receiverId))
                {
                    if (currentReciever == '')
                    {
                        $('#leftPanel a#' + receiverId + '_1').click();
                    }

                    $('#hPageReceiverID').val(receiverId);

                    if (ChatType == 1)
                    {
                        $('#topMainSender').html(name);
                        $('#' + receiverId + '_1 p').html(name);
                    }

                    setTimeout(function ()
                    {
                        $("#msgList").append(htmlTextMsg).scrollTop($("#msgList").prop('scrollHeight'));
                    }, date);

                    $('#' + receiverId + '_' + ChatType).parent().prependTo('#leftPanel ul');
                }
                else
                {
                    if (insession != '1')
                    {
                        sound = true;
                    }

                    if (($('#leftPanel ul li a.slcted').length > 0) && ($('#leftPanel ul li a.slcted').parent().index() == 0))
                    {
                        $('#leftPanel ul li a.slcted').parent().after($('#' + receiverId + '_' + ChatType).parent());
                    }
                    else
                    {
                        $('#' + receiverId + '_' + ChatType).parent().prependTo('#leftPanel ul');
                    }
                }

                ///////Send Acknowledgement
                if (ChatType == 1)
                {
                    chat.server.sendAcknowledgement(myself, receiverId, UniqueID);
                    chat.server.updateMessageStatus(receiverId, UniqueID, 1, getSelfConnectionId());
                }

                $('#' + receiverId + '_' + ChatType + ' span.clsNewOne').css('display', 'inline-block');
                $('li[data-key="' + receiverId + '"] span.clsNewMsg').css('display', 'inline-block');

                if (sound
                    && !(IsOnVirtualEvent())
                )
                {
                    PlaySound();
                }
                /////common for all..........
                insertConversation(receiverId, name, recievedMsg, ChatType, true, (ChatType == 1 ? ImagRv : null));
                $('#typingSomething').css('display', 'none');
                document.title = 'MAGI - New message received';

                if (typeof MoveToTop === 'function')
                {
                    MoveToTop(receiverId);
                }
            };

            chat.client.hideThisMsgFromChat = function (msg_GUID, hide)
            {
                if (hide)
                {
                    $('ul#msgList li small #' + msg_GUID.toString()).closest('li').attr('style', 'display: none !important');
                    $('ul#msgsList li #' + msg_GUID.toString()).closest('li').attr('style', 'display: none !important');
                }
                else
                {
                    $('ul#msgList li small #' + msg_GUID.toString()).closest('li').attr('style', '');
                    $('ul#msgsList li #' + msg_GUID.toString()).closest('li').attr('style', '');
                }
            };

            chat.client.dontJoinTheGroup = function (targetID)
            {
                try
                {
                    if (typeof selectOneToOneChat === 'function')
                    {
                        selectOneToOneChat(targetID);
                        alertify.alert("You are no longer a participant of " + targetID + " group, please contact MAGI support team");
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                }
            };

            chat.client.synchronizeSentMsgs = function (clsAvatarSndr, date, who, text, ChatType, UniqueID, control, currentRecieverID)
            {
                try
                {
                    if ($('b#' + UniqueID).length <= 0)
                    {
                        if (currentRecieverID == getReceiverId())
                        {
                            var theText =
                                '<li class="d-flex justify-content-between p-2 flex-row-reverse">' +
                                '<span class="magi-chat-user-icon">' +
                                '<span class="magi-chat-user-image clsAvatarSndr" style="background-image: url(' + clsAvatarSndr + ');">' +
                                '</span>' +
                                '</span>' +
                                '<span class="magi-chat-user-text-wapper p-3 flex-grow-1">' +
                                '<span class="magi-chat-list-user-name">Me</span>' +
                                '<span class="magi-chat-user-text">' + text + '</span>' +
                                '<small class="magi-chat-user-msg-time"><b id=' + UniqueID + ' style="font-size: 11px;margin-right: 10px;"></b>' + date + '</small>' +
                                '</span>' +
                                '</li>';

                            setTimeout(function ()
                            {
                                $("#msgList").append(theText).scrollTop($("#msgList").prop('scrollHeight'));
                            }, 0);
                        }
                        insertConversation(currentRecieverID, who, control, ChatType, true, null, null);
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                }
            };

            chat.client.showMenuItemForGroup = function (showThisElement)
            {
                var elementOfMenu = $('a:contains("My interest group")');
                if (showThisElement)
                {
                    elementOfMenu.parent().css('display', 'list-item');
                    elementOfMenu.attr('shown', '1');
                }
                else
                {
                    elementOfMenu.parent().css('display', 'none');
                    elementOfMenu.attr('shown', '0');

                    if ((location.pathname.toUpperCase().includes('/MYMAGI/MYGROUPCHAT')) ||
                        (location.pathname.toUpperCase().includes('/GROUPCHAT')))
                    {
                        window.location.href = "/Home";
                    }
                }
            }


            chat.client.updateTheCorrectName = function (id, correctName)
            {
                $('#' + id + '_1 p').html(correctName);
                if (id == getReceiverId())
                {
                    $('#topMainSender').html(correctName);
                }
                else
                {
                    $('#' + id + '_1 p').click();
                }

                var result = searchInArray(conversations, id.toString(), 1);
                if (IsNotUndefined(result))
                {
                    (conversations[result]).nm = correctName;
                }
            }

            chat.client.checkRecieved = function (receiver, msg_ID)
            {
                var ind = parseInt(searchInArray(conversations, receiver, '1'));

                if (IsNotUndefined(ind))
                {
                    var t = conversations[ind].talks;

                    $(t).each(function (i, m)
                    {
                        if (m.mid == msg_ID && m.mine == true)
                        {
                            conversations[ind].talks[i].msgSt = 1;
                            $('#' + msg_ID).html('Sent');

                            //var myID = getSelfConnectionId();
                            //chat.server.updateMessageStatus(myID, msg_ID, 1);
                        }
                    });
                }
            }

            chat.client.checkRecievedForSeen = function (receiver, msg_ID)
            {
                var ind = parseInt(searchInArray(conversations, receiver, '1'));

                if (IsNotUndefined(ind))
                {
                    if (ind != NaN && conversations[ind] !== 'undefined' && conversations[ind] != null)
                    {
                        var t = conversations[ind].talks;
                        $(t).each(function (i, m)
                        {
                            if (m.mid == msg_ID && m.mine == true)
                            {
                                conversations[ind].talks[i].msgSt = 2;
                                $('#' + msg_ID).html('Seen');
                            }
                        });
                    }
                }
            }

            chat.client.ctlPanelMingleConfirmation = function (msg)
            {
                alertify.alert(msg);
                showListOverlay(false);
            }

            chat.client.showError = function (ErrorMsg)
            {
                console.log(ErrorMsg);
            };

            chat.client.SoundForPointsBySignal = function (n)
            {
                SoundForPoints(n);
            };

            chat.client.showMenuItemForGroup = function (showThisElement)
            {
                var elementOfMenu = $('a:contains("My interest group")');
                if (showThisElement)
                {
                    elementOfMenu.parent().css('display', 'list-item');
                    elementOfMenu.attr('shown', '1');
                }
                else
                {
                    elementOfMenu.parent().css('display', 'none');
                    elementOfMenu.attr('shown', '0');

                    if ((location.pathname.toUpperCase().includes('/MYMAGI/MYGROUPCHAT')) ||
                        (location.pathname.toUpperCase().includes('/GROUPCHAT')))
                    {
                        window.location.href = "/Home";
                    }
                }
            };

            chat.client.updateSender = function (usr, json, myIP)
            {
                try
                {
                    if (usr != null)
                    {
                        $('#hclsAvatarSndr').val(usr.img.replace('~', ''));
                        currIP = usr.ipAddress.toString();
                    }

                    console.log(currIP + "~" + myIP);
                    chat.client.matchIPAdress(getSelfConnectionId(), myIP);

                    var myID = getSelfConnectionId();
                    var diff = "300";
                    var eventKey = getCurrentEvent();

                    if (typeof getSelectedSponsor === 'function')
                    {
                        var selectedSponsor = getSelectedSponsor();
                        chat.server.getChat(myID, diff, eventKey, selectedSponsor);
                        if (myID != selectedSponsor)
                            removeMsgingTools();
                    }
                    else
                        chat.server.getChat(myID, diff, eventKey, '');

                    var networkingBadge = $('#imgYourNetworkingBadge').prop('src');
                    var networkingSpan = $('#lblNetLevel').html();

                    if (isNotNullAndEmpty(networkingBadge) && isNotNullAndEmpty(networkingSpan))
                    {
                        $('#networkingPanelStatus').slideDown(100);
                        $('#panelNetworkingBadge').prop('src', networkingBadge);
                        $('#panelNetworkingSpan').html(networkingSpan);
                    }

                    var inZoomSession = @(Model.zoomSessionSilentMode ? 1 : 0);

                    if (
                        ((inZoomSession == 1)
                        &&
                        (location.pathname.toUpperCase().includes('ZOOMSESSION')))
                        ||
                        (location.pathname.toUpperCase().includes('VIRTUALSESSION'))
                        )
                    {
                        setInSession('1');
                    }

                    CheckProgressInNetworkingLevel();

                    try
                    {
                        if (location.pathname.toUpperCase().includes('EVENTONCLOUD') &&
                            needToOpenAdminGroup == true)
                        {
                            needToOpenAdminGroup = false;

                            if (typeof CheckForTeamOption === 'function' && CheckForTeamOption() != null)
                            {
                                if (getCookie("adminGrp") == "1" && getCookie("isChatPaused") != '1')
                                {
                                    alertify.alert("Rejoin your group from the Chat panel");
                                }
                                else if (typeof SelectInterestGrpInChatType === 'function')
                                {
                                    SelectInterestGrpInChatType();
                                }
                            }
                        }
                        else if ((location.pathname.toUpperCase() + location.search.toUpperCase()) == "/PHOTOWALL?TYPE=MYGROUP")
                        {
                            SelectInterestGrpInChatType();
                        }
                        else if (location.pathname.toUpperCase() == "/GROUPCHAT")
                        {
                            SelectInterestGrpInChatType();
                        }
                    }
                    catch (ex)
                    {
                        console.log(ex);
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                }
            };

            chat.client.loadHistory = function (chatHistory)
            {
                try
                {
                    conversations = [];
                    clearLeftPanel();
                    clearEveryThing();

                    var ischatVisible = false;
                    if (IsNotUndefined(chatHistory))
                    {
                        var jsn = chatHistory;
                        if (jsn != null && jsn.chats.length > 0)
                        {
                            infoAboutRecentChats = [];
                            $(jsn.chats).each(function (indx, obj)
                            {
                                if (obj.ChtType != 2)   ///// Later need to remove
                                {
                                    var objectForInfoAboutRecentChats =
                                    {
                                        ID: obj.ID,
                                        name: obj.nm,
                                        img: obj.img.replace('~', ''),
                                        JobTitle: obj.JobTitle,
                                        bio: obj.bio,
                                        dept: obj.dept,
                                        org: obj.org
                                    };
                                    infoAboutRecentChats.push(objectForInfoAboutRecentChats);

                                    appendLeftPanel(obj.ID, obj.nm, obj.talks, obj.ChtType, obj.isMineNow, obj.nick, obj.img.replace('~', ''));

                                    if (obj.isMineNow)
                                        ischatVisible = true;
                                }
                            });
                        }
                    }

                    if (conversations.length > 0 && $('#leftPanel a').length > 0)
                    {
                        checkCookie();
                        chatAvailable = true;
                        try
                        {
                            if (typeof showListOverlay === 'function')
                                showListOverlay(false);
                        } catch { }
                    }

                    if (typeof hideChatMenu === 'function')
                    {
                        hideChatMenu(ischatVisible);

                        if (ischatVisible)
                        {
                            $(`li.hide-radio span:contains('My Chats')`).closest('li').show();
                        }
                    }

                    if (typeof coverChatPanel === 'function')
                    {
                        coverChatPanel(false);
                    }

                    $('a[datatype=2] span.magiVirtualCatListOnlineIcon').remove();

                    if (location.pathname.toUpperCase().includes('EVENTONCLOUD'))
                    {
                        var allIds = '';
                        for (var n = 0; n < conversations.length; n++)
                        {
                            if (conversations[n].ChtType == 1)
                            {
                                if (isNotNullAndEmpty(allIds))
                                {
                                    allIds += ',' + conversations[n].ID;
                                }
                                else
                                {
                                    allIds += conversations[n].ID;
                                }
                            }
                        }

                        chat.server.sendForCheckingGreetingText(allIds, getCurrentEvent(), getSelfConnectionId());
                    }

                    addEventListenerForShowingInfo();
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.updateReceiver = function (obj, chatType, chatId, ntfy, topicName, msgTxt)
            {
                opentheChat();
                if (chatType == 1)
                {
                    $('#topMainSender').html(obj.name);
                    appendLeftPanel(chatId, obj.name, null, chatType, true, obj.nick, obj.topImg.replace('~', ''));
                    $('#' + chatId + '_1').click();

                    if (ntfy == 1)
                    {
                        var msg = "You are connected with " + obj.name;
                        notifyMsg(msg, "ul#msgList");
                    }

                    if (IsNotUndefined(topicName) && topicName != null && topicName != '')
                    {
                        showTheNextUpTopic(topicName, obj.name);
                    }
                    setTextInEntry(msgTxt);
                }

                scrollToBottom();
            };

            chat.client.someOneIsTyping = function (senderName, senderId, groupID, sndrChatTp)
            {
                var currentRV = getReceiverId();
                var chatType = getChatType();
                var show = false;

                if (chatType == '1' && sndrChatTp == '1' && currentRV == senderId)
                {
                    show = true;
                }
                else if (chatType == '2' && sndrChatTp == '2' && currentRV == groupID)
                {
                    show = true;
                }

                if (show)
                {
                    $('#typingSomething p').html(senderName + ' is typing ');
                    $('#typingSomething').css('display', 'flex');
                }
                else
                    $('#typingSomething').css('display', 'none');
            }

            chat.client.someOneIsTyped = function (senderId)
            {
                var currentRV = getReceiverId();
                if (currentRV == senderId)
                {
                    $('#typingSomething').css('display', 'none');
                }
                //console.log(currentRV +'  '+senderId);
            }

            chat.client.OpenChatOverThereClient = function (id, name, topicName)
            {
                OpenMyChat(id, name, 1, 1, topicName);
                $('#preloaderForInstantConnect').fadeOut(500);
            }

            chat.client.OpenChatOverThereClientWithoutMsg = function (id, name)
            {
                $('#preloaderForInstantConnect').fadeOut(500);
                OpenMyChat(id, name, 1);
            }

            /////////////////////Connection Methods starts here
            chat.client.ChangeButtonTo = function (targetbutton, imgUrl, disability, titleText)
            {
                $(targetbutton).prop('src', imgUrl).prop('disabled', disability).prop('title', titleText).prop('alt', titleText);
                if (disability)
                {
                    $(targetbutton).removeClass("animateClass");
                }
            }

            chat.client.createBioButton = function ()
            {
                ////////////////////////Bio Starts here.................
                var btnBioOnChat = $('<input/>', {
                    id: "btnBioOnChat",
                    type: "image",
                    src: "/Images/Icons/bio.png",
                    alt: "Bio",
                    title: "Bio",
                    style: "vertical-align: bottom;height:30px"
                });
                $('#MainHeaderOfChat #dvForBio #btnBioOnChat').remove();
                $('#MainHeaderOfChat #dvForBio').append(btnBioOnChat);
                $('#btnBioOnChat').off('click');
                $('#btnBioOnChat').on('click', function ()
                {
                    if (getOptOut())
                        return;

                    var personId = getReceiverId();
                    var mySelf = getSelfConnectionId();
                    var eventKey = getCurrentEvent();
                    chat.server.getBio(mySelf, personId, eventKey);
                    return false;
                });
                ////////////////////////Bio Ends here.................
            }

            chat.client.createMeetButton = function (eventOrg, rName)
            {
                ////////////////////////Meet Starts here.................
                var btnMeet = $('<input/>', {
                    id: "btnMeet",
                    type: "image",
                    width: "30",
                    height: "30",
                    src: "/Images/Icons/1.png",
                    alt: "Meet",
                    title: "Meet",
                    style: "vertical-align: bottom;height:30px",
                    onclick: "return false;"
                });

                $('#MainHeaderOfChat #dvForMeet #btnMeet').remove();
                $('#MainHeaderOfChat #dvForMeet').append(btnMeet);
                ////////////////////////Meet Ends here.................

                $('#btnMeet').off('click');
                $('#btnMeet').on('click', function ()
                {
                    if (getOptOut())
                        return;

                    $('#MainHeaderOfChat #dvForMeet #btnMeet').remove();
                    //$('#hdnCurrEvent').val(getCurrentEvent());
                    $('#hdnEventOrg').val(eventOrg);
                    $('#hiddenFieldForTargetPkey').val(getReceiverId());
                    $('#HiddenFieldForSponsorName').val(rName);

                    var windowForMeet = $find('<%=rwCreateMeeting.ClientID%>');
                    //HR windowForMeet.show();
                });
            }

            ////////////////////////////////For video chat...........

            chat.client.createVideoButton = function (urlToMove)
            {
                var btnVideoChat = $('<input/>',
                    {
                        id: "btnVideoChat",
                        type: "image",
                        width: "30",
                        height: "30",
                        src: "/Images/Icons/video.png",
                        alt: "Video Chat",
                        title: "Video Chat",
                        style: "vertical-align:bottom;height:30px"
                    });

                $('#MainHeaderOfChat #dvVideoChat').append(btnVideoChat);
                $('#btnVideoChat').off('click');
                $('#btnVideoChat').on('click', function ()
                {
                    if (getOptOut())
                        return;

                    window.location = urlToMove;
                    return false;
                });
            }

            chat.client.createConnectionButton = function (ButtonType, fromMe, connectionTarget, allowForMore, refusedByOwn, IsExpired, inNetworking, isOnline)
            {
                try
                {
                    if (getOptOut() || ((new Date(getLastDateOfEvent())) < (new Date())))
                        return;

                    if (connectionTarget == getReceiverId())
                    {
                        removeAllConRelateBtns();
                        if (ButtonType == 5)
                        {
                            var colorOfBtn = '';
                            var btnTitle = '';
                            if (IsExpired)
                            {
                                if (fromMe)
                                {
                                    colorOfBtn = "/Images/Icons/Connection_Expired.png";
                                    btnTitle = "Connection Expired - Request Connection Again";
                                }
                                else
                                {
                                    colorOfBtn = "/Images/Icons/Connection_ExpiredMe.png";
                                    btnTitle = "Connection Expired - Request Connection Again";
                                }
                            }
                            else
                            {
                                colorOfBtn = "/Images/Icons/Connection_Request.png";
                                btnTitle = "Request Connection";
                            }

                            var makeConnectionButton = $('<input/>', {
                                id: "btnMakeConnection",
                                type: "image",
                                width: "30",
                                height: "30",
                                src: colorOfBtn,
                                alt: btnTitle,
                                title: btnTitle,
                                style: "vertical-align:bottom;height:30px"
                            });

                            $('#MainHeaderOfChat #dvForConnect').append(makeConnectionButton);
                            $('#btnMakeConnection').on('click', function ()
                            {
                                if (getOptOut())
                                    return;

                                if (!inNetworking)
                                    alertify.alert('This user is out of networking entirely. You cannot send a connection request to this person');

                                if (allowForMore)
                                {
                                    var myId = getSelfConnectionId();
                                    var rID = getReceiverId();

                                    var currentEvent = getCurrentEvent();
                                    var myName = getMyName();
                                    var eventOrganizationkey = getEventOrganizationkey();
                                    chat.server.madeRequest(myId, rID, currentEvent, myName, eventOrganizationkey);

                                    if (IsThisUserEventSponsor(connectionTarget))
                                    {
                                        SoundForPoints(3);
                                    }
                                    else
                                    {
                                        var targetInfo = GetinfoAboutRecentChats(connectionTarget.toString());
                                        if (IsNotUndefinedAndAlsoNotNull(targetInfo))
                                        {
                                            var targetOrgName = targetInfo.org;
                                            if (getMyOrganizationName() != targetOrgName)
                                                SoundForPoints(1);
                                        }
                                    }

                                    try
                                    {
                                        if (typeof searchAndRemove === 'function')
                                        {
                                            searchAndRemove(parseInt(rID));
                                        }
                                    }
                                    catch (ex)
                                    {
                                        //console.log(ex);
                                    }
                                }
                                else
                                {
                                    alertify.alert('You have reached your limit of open connection requests. Make more requests when some of them have been accepted or have expired.');
                                }

                                return false;
                            });

                        }
                        else if (ButtonType == 0)
                        {
                            var ShowConnectionButton = $('<input/>', {
                                id: "ShowConnectionButton",
                                type: "image",
                                width: "30",
                                height: "30",
                                src: "/images/icons/Connection_Pending.png",
                                alt: "Connection Requested by Me",
                                title: "Connection Requested by Me",
                                style: "vertical-align: bottom;height:30px;",
                                disabled: true
                            });

                            $('#MainHeaderOfChat #dvForConnect').append(ShowConnectionButton);
                        }
                        else if (ButtonType == 1)
                        {
                            var btnAccepted = $('<input/>', {
                                id: "btnAccepted",
                                type: "image",
                                width: "30",
                                height: "30",
                                src: "/images/icons/Connection_Accept.png",
                                alt: "Connected",
                                title: "Connected",
                                style: "vertical-align: bottom;height:30px;",
                                disabled: true
                            });

                            $('#MainHeaderOfChat #dvForConnect').append(btnAccepted);
                        }
                        else if (ButtonType == 2)
                        {
                            var colorOfBtn = '';
                            var title = '';
                            var clickable = false;

                            if (fromMe)
                            {
                                if (refusedByOwn)
                                {
                                    colorOfBtn = "/images/icons/Connection_Request.png";
                                    title = 'I Retracted Connection Request';
                                    clickable = true;
                                }
                                else
                                {
                                    colorOfBtn = "/images/icons/Connection_Pending.png";
                                    title = 'Connection Requested by Me';
                                }
                            }
                            else
                            {
                                if (refusedByOwn)
                                {
                                    colorOfBtn = "/images/icons/Connection_Request.png";
                                    title = 'Connection Retracted by ' + $('#topMainSender').html();
                                    clickable = true;
                                }
                                else
                                {
                                    colorOfBtn = "/images/icons/Connection_Refuse.png";
                                    title = 'Connection Declined by Me';
                                }
                            }

                            var btnPending = $('<input/>', {
                                id: "btnPending",
                                type: "image",
                                width: "30",
                                height: "30",
                                src: colorOfBtn,
                                alt: title,
                                title: title,
                                style: "vertical-align: bottom;height:30px;",
                                disabled: !clickable
                            });

                            $('#MainHeaderOfChat #dvForConnect').append(btnPending);

                            $('#btnPending').on('click', function ()
                            {
                                if (getOptOut())
                                    return;

                                if (!inNetworking)
                                    alertify.alert('This user is out of networking entirely. You cannot send a connection request to this person');

                                if (allowForMore)
                                {
                                    var myId = getSelfConnectionId();
                                    var rID = getReceiverId();

                                    var currentEvent = getCurrentEvent();
                                    var myName = getMyName();
                                    var eventOrganizationkey = getEventOrganizationkey();
                                    chat.server.madeRequest(myId, rID, currentEvent, myName, eventOrganizationkey);
                                    //alertify.alert('Connection request sent');

                                    try
                                    {
                                        if (typeof searchAndRemove === 'function')
                                        {
                                            searchAndRemove(parseInt(rID));
                                        }
                                    }
                                    catch (ex)
                                    {
                                        //console.log(ex);
                                    }
                                }
                                else
                                {
                                    alertify.alert('You have reached your limit of open connection requests. Make more requests when some of them have been accepted or have expired.');
                                }

                                return false;
                            });
                        }
                        else if (ButtonType == 3)
                        {
                            var title = '';
                            var colorOfBtn = '';
                            if (fromMe == true)
                            {
                                title = 'Connection Requested by Me';
                                colorOfBtn = "/images/icons/Connection_Pending.png";
                            }
                            else
                            {
                                title = 'Ignored by Me';
                                colorOfBtn = "/images/icons/Connection_Ignore.png";
                            }

                            var btnDeclined = $('<input/>', {
                                id: "btnDeclined",
                                type: "image",
                                width: "30",
                                height: "30",
                                src: colorOfBtn,
                                alt: title,
                                title: title,
                                style: "vertical-align: bottom;height:30px;",
                                disabled: true
                            });

                            $('#MainHeaderOfChat #dvForConnect').append(btnDeclined);
                        }

                        var conStatus = {
                            st: ButtonType,
                            fromMe: fromMe,
                            refusedByOwn: refusedByOwn,
                            isExpired: IsExpired,
                            nick: ''
                        };
                        chat.client.updateConnectionIcon(connectionTarget, conStatus, isOnline);
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.createAcceptRequest = function (source, target, currEvent, senderName, nth)
            {
                if (source == getReceiverId())
                {
                    var acceptConnection = $('<input/>', {
                        id: "btnAccept",
                        type: "image",
                        width: "30",
                        height: "30",
                        src: "/Images/Icons/accept.png",
                        alt: "Accept Connection",
                        title: "Accept Connection",
                        style: "vertical-align: bottom;height:30px;",
                        class: "animateClass"
                    });

                    if (nth == "1")
                        alertify.alert(senderName + ' has requested a connection. Click on a blinking icon in chat to accept or decline.');

                    removeAllConRelateBtns();

                    removeButtonsFromDiv('btnAccept');
                    $('#MainHeaderOfChat #dvForAccecpt').append(acceptConnection);

                    $('#btnAccept').on('click', function ()
                    {
                        if (getOptOut())
                            return;
                        var myNameOnAcc = getMyName();
                        chat.server.acceptRequest(source, target, currEvent, myNameOnAcc);
                        return false;
                    });

                    //Reject button starts here............
                    var rejectRequest = $('<input/>', {
                        id: "btnReject",
                        type: "image",
                        height: "27",
                        src: "/Images/Icons/close.png",
                        alt: "Decline Connection",
                        title: "Decline Connection",
                        style: "vertical-align: bottom;height:27px",
                        class: "animateClass"
                    });
                    removeButtonsFromDiv('btnReject');
                    $('#MainHeaderOfChat #dvForReject').append(rejectRequest);

                    $('#btnReject').on('click', function ()
                    {
                        if (getOptOut())
                            return;
                        chat.server.rejectRequest(source, target, currEvent, senderName);
                        return false;
                    });
                }
            }

            chat.client.requestAccepted = function (nameOfTargert, targetId)
            {
                alertify.alert(nameOfTargert + " has accepted your connection request.");
                if (IsThisUserEventSponsor(targetId))
                {
                    SoundForPoints(3);
                }
                else
                {
                    var targetInfo = GetinfoAboutRecentChats(targetId.toString());
                    if (IsNotUndefinedAndAlsoNotNull(targetInfo))
                    {
                        var targetOrgName = targetInfo.org;
                        if (getMyOrganizationName() != targetOrgName)
                            SoundForPoints(1);
                    }
                }
            }

            chat.client.requestRejected = function ()
            {
                //alertify.alert("Your request has not been accepted");
            }

            chat.client.removeAcceptButton = function ()
            {
                removeButtonsFromDiv('btnAccept');
                removeButtonsFromDiv('btnReject');
                chat.client.getbuttonsAgain();
            }

            chat.client.customMsg = function (msg)
            {
                alertify.alert(msg);
            }

            chat.client.takeToMeeting = function (url)
            {
                window.open(url, "ZoomMeeting");
            }

            chat.client.customMsgOnTheBaseOfPage = function (pageName, msg)
            {
                if (location.pathname.includes(pageName))
                {
                    alertify.alert(msg);
                }
            }

            chat.client.getbuttonsAgain = function ()
            {
                try
                {
                    if (viewingOthersChat())
                        return;

                    var TargetId = getReceiverId();
                    var currentEvent = getCurrentEvent();
                    var isDemo = parseInt($('#hIsDemo').val());
                    var isPartner = (getIsPartner() == 'True') ? 1 : 0;

                    var org = getMyOrganization();
                    var activeEvent = getActiveEvent();

                    var myId = getSelfConnectionId();
                    chat.server.getButtons(myId, TargetId, currentEvent, isDemo, 1, isPartner, org, activeEvent);

                    if (getOptOut() || ((new Date(getLastDateOfEvent())) < (new Date())))
                        return;

                    chat.server.getButtonForMeet(myId, myId, TargetId,
                        currentEvent, org, activeEvent);
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.celebrateSound = function (type, NetLevel, strMsg)
            {
                Celebrate(type, NetLevel, strMsg);
            }

            chat.client.updateConnectionIcon = function (rID, conStatus, isOnline)
            {
                try
                {
                    var strIconImg = '';
                    var buttonTitle = '';

                    if (conStatus == null || !IsNotUndefined(conStatus))
                    {
                        strIconImg = "/Images/Icons/Connection_Request.png";
                        buttonTitle = 'Request Connection';
                    }
                    else if (conStatus.st == '0')
                    {
                        if (conStatus.isExpired)
                        {
                            if (conStatus.fromMe)
                            {
                                strIconImg = "/Images/Icons/Connection_Expired.png";
                            }
                            else
                            {
                                strIconImg = "/Images/Icons/Connection_ExpiredMe.png";
                            }
                            buttonTitle = "Connection Expired - Request Connection Again";
                        }
                        else
                        {
                            if (conStatus.fromMe)
                            {
                                strIconImg = "/Images/Icons/Connection_Pending.png";
                                buttonTitle = "Connection Requested by Me";
                            }
                            else
                            {
                                strIconImg = "/Images/Icons/Connection_Request.png";
                                buttonTitle = "Connection Requested by " + ($('a#' + rID + '_1 p').html());
                            }
                        }
                    }
                    else if (conStatus.st == '1')
                    {
                        strIconImg = '/Images/Icons/Connection_Accept.png';
                        buttonTitle = "Connected";
                    }
                    else if (conStatus.st == '2')
                    {
                        if (conStatus.fromMe)
                        {
                            if (conStatus.refusedByOwn)
                            {
                                strIconImg = "/images/icons/Connection_Request.png";
                                buttonTitle = 'I Retracted Connection Request';
                            }
                            else
                            {
                                strIconImg = "/images/icons/Connection_Pending.png";
                                buttonTitle = 'Connection Requested by Me';
                            }
                        }
                        else
                        {
                            if (conStatus.refusedByOwn)
                            {
                                strIconImg = "/images/icons/Connection_Request.png";
                                buttonTitle = 'Connection Retracted by ' + ($('a#' + rID + '_1 p').html());
                            }
                            else
                            {
                                strIconImg = "/images/icons/Connection_Refuse.png";
                                buttonTitle = 'Connection Declined by Me';
                            }
                        }
                    }
                    else if (conStatus.st == '3')
                    {
                        if (conStatus.fromMe == true)
                        {
                            strIconImg = "/images/icons/Connection_Pending.png";
                            buttonTitle = 'Connection Requested by Me';
                        }
                        else
                        {
                            strIconImg = "/images/icons/Connection_Ignore.png";
                            buttonTitle = "Ignored by Me";
                        }
                    }

                    if (strIconImg != '')
                    {
                        var ShowConnectionIconOnTop = $('<img/>',
                            {
                                src: strIconImg,
                                title: buttonTitle,
                                alt: buttonTitle,
                                class: 'showConnectionInfoOnTop'
                            });

                        $('a#' + rID + '_1 .showConnectionInfoOnTop').remove();
                        $('a#' + rID + '_1 .magi-chat-user-icon').append(ShowConnectionIconOnTop);

                        var ConnectionInfoIcon = $('<img/>',
                            {
                                src: strIconImg,
                                title: buttonTitle,
                                alt: buttonTitle,
                                class: 'clsConnectionInfoIcon'
                            });

                        $('#ulChatList li[data-key="' + rID + '"] .magiVirtualCatListIcon .clsConnectionInfoIcon').remove();
                        $('#ulChatList li[data-key="' + rID + '"] .magiVirtualCatListIcon').append(ConnectionInfoIcon);

                        var ConnectionInfoIconForLeftPanel = $('<img/>',
                            {
                                src: strIconImg,
                                title: buttonTitle,
                                alt: buttonTitle,
                                class: 'showConnectionInfoOnTop'
                            });

                        $('#ulChatListLeftPanel li a[dataid="' + rID + '"] .showConnectionInfoOnTop').remove();
                        $('#ulChatListLeftPanel li a[dataid="' + rID + '"] .magi-chat-user-icon').append(ConnectionInfoIconForLeftPanel);

                        if (conStatus != null && conStatus.nick != '')
                        {
                            $('a#' + rID + '_1').attr('nick', conStatus.nick);
                        }
                    }

                    if (!isOnline)
                        $('#ulChatListLeftPanel li a[dataid="' + rID + '"] span.magiVirtualCatListOnlineIcon').attr('isOnline', '0').css('display', 'none');
                    else
                        $('#ulChatListLeftPanel li a[dataid="' + rID + '"] span.magiVirtualCatListOnlineIcon').attr({ 'isOnline': '1', 'Title': 'Online' });
                }
                catch (ex)
                {
                    console.log(ex);
                }
            };


            /////////////////////Connection Methods ends here

            chat.client.createStampButton = function (IsThStamp, visible, intThAccountPkey, theTargetId, isprtner)
            {
                if (getOptOut() || ((new Date(getLastDateOfEvent())) < (new Date())))
                    return;

                var urll = '';
                var titlle = '';
                //var isprtner = (getIsPartner() == 'True') ? 1 : 0;
                var propdisabled = true;

                if (IsThStamp == '0')
                {
                    urll = "/Images/Icons/THBlue.png";
                    propdisabled = false;

                    if (isprtner == true)
                    {
                        visible = 0;
                        titlle = "Not Requested";
                    }
                    else
                    {
                        titlle = "Request Treasure Hunt Stamp";
                    }
                }
                else if (IsThStamp == '1')
                {
                    urll = "/Images/Icons/THGreen.png";
                    titlle = "Treasure Hunt Card Stamped";//"Stamped";
                }
                else if (IsThStamp == '2')
                {
                    propdisabled = false;

                    if (isprtner == true)
                    {
                        titlle = "Ignored by Me";
                        urll = "/Images/Icons/THGray.png";
                    }
                    else
                    {
                        titlle = "Treasure Hunt Card Stamp Requested";//"Stamp Requested";
                        urll = "/Images/Icons/THYellow.png";
                    }
                }
                else if (IsThStamp == '3')
                {
                    urll = "/Images/Icons/THYellow.png";

                    if (isprtner == true)
                        titlle = "Requested";
                    else
                        titlle = "Treasure Hunt Card Stamp Requested";//"Stamp Requested";
                }
                else if (IsThStamp == '4')
                {
                    if (isprtner == true)
                    {
                        urll = "/Images/Icons/THYellow.png";
                        titlle = "Declined";
                    }
                    else
                    {
                        urll = "/Images/Icons/THYellow.png";
                        titlle = "Treasure Hunt Card Stamp Requested";//"Stamp Requested";
                    }
                }

                //////If he's partner then show and enable for all cases......
                if (isprtner == true)
                {
                    propdisabled = false;
                }

                if (visible == 1 && theTargetId == getReceiverId())
                {
                    var makeStampButton = $('<input/>', {
                        id: "btnStamp",
                        dKey: IsThStamp,
                        type: "image",
                        src: urll,
                        alt: "stamp",
                        title: titlle,
                        disabled: propdisabled,
                        width: "30",
                        height: "30",
                        style: "vertical-align: bottom;width:30px;height:30px"
                    });

                    removeButtonsFromDiv('btnStamp');

                    $('#MainHeaderOfChat #dvForTHunt').append(makeStampButton);
                    $('#btnStamp').on('click', function ()
                    {
                        if (getOptOut())
                            return;
                        var key = $(this).attr('dKey');
                        var myId = getSelfConnectionId();
                        var userId = getReceiverId();
                        var evkey = getCurrentEvent();
                        var myName = getMyName();
                        chat.server.stampClick(key, myId, userId, evkey, intThAccountPkey, myName);

                        //HR
                        //var btnElem = document.getElementById('<%=btnCardStampRequest.ClientID%>');
                        //var thacc = document.getElementById('<%=hdnThAccount.ClientID%>');
                        //thacc.value = userId;
                        //btnElem.click();

                        return false;
                    });
                }
            }

            chat.client.treasureHuntWindow = function (userId)
            {
                $('#hdnThAccount').val(userId);
                //HR
                //var wnd = $find('<%=rwTreasureHunt.ClientID %>');
                //wnd.show();
                $('div[id*="rwTreasureHunt"].RadWindow.rwShadow').css('opacity', '1');

                //$('div[id*="rdChatWindow"].RadWindow.rwShadow').css('z-index','9999');
                //$('div[id*="rwTreasureHunt"].RadWindow.rwShadow').css('z-index','99999999999999');
            }

            chat.client.instantChatTopic = function (topicName, chngrName, objList, changer, numOcurr)
            {
                try
                {
                    var instantPerson = $('#hInstantConnect').val();
                    if (changer == getSelfConnectionId())
                    {
                        $('#' + instantPerson + '_1').click();
                    }
                    else if (changer != getReceiverId())
                    {
                        var stringLink = '#' + changer + '_1';
                        if ($(stringLink).length == 0)
                        {
                            OpenMyChat(changer, chngrName, 1);
                        }
                        $(stringLink).click();
                    }

                    $('#dvNextUpSection #topicList').remove();
                    $('#dvNextUpSection').append('<select id="topicList"></select>');
                    //$("div[id*='ddlChatRoom'] .rddlList li").each(function(i,v)
                    $(objList).each(function (i, v)
                    {
                        var tpName = v;
                        if (tpName != '')
                            $('#topicList').append('<option value="' + tpName + '">' + tpName + '</option>');
                    });

                    $("#topicList").val(topicName);

                    if (numOcurr == 1)
                    {
                        showTheNextUpTopic(topicName, chngrName);
                    }

                    $("#topicList").on("change", function ()
                    {
                        var strtopic = "";
                        strtopic = $("select#topicList option:selected").text();
                        var mySelf = getSelfConnectionId();
                        var receiverConId = instantPerson;
                        var changerName = getMyName();
                        chat.server.changedTopic(strtopic, mySelf, receiverConId, changerName, objList);
                    });
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.matchIPAdress = function (paraUID, paraIP)
            {
                if (paraUID == getSelfConnectionId() && paraIP != '' && currIP != '' && paraIP != currIP)
                {
                    //alertify.alert("Only attendees may attend or watch sessions. Signed out because you signed with another device.");
                    //$('input[id*=cLogOut]').click();
                    console.log('IP Issue');
                }
            }

            chat.client.showchatinListCall = function (Conversations)
            {
                if (typeof showchatinList === 'function')
                    showchatinList(Conversations);
                //else
                //    alertify.alert('Unable to show chat');
            };

            chat.client.loadHistoryForThisPerson = function (chatHistory)
            {
                try
                {
                    clearMsgs();
                    if (IsNotUndefinedAndAlsoNotNull(chatHistory))
                    {
                        var jsn = chatHistory;
                        if (jsn.chats.length > 0)
                        {
                            $(jsn.chats).each(function (indx, obj)
                            {
                                appendMsgToChat(obj.talks);
                            });
                            $("#msgsList").scrollTop($("#msgsList").prop('scrollHeight'));
                        }
                    }
                    coverChat(false);

                    //var selectedSponsor = $('#hSelectedSponor').val();
                    //if (IsNotUndefinedAndAlsoNotNull(selectedSponsor) && getSelfConnectionId() != selectedSponsor)
                    //{
                    //    removeMsgingTools();
                    //}
                    //else
                    //{
                    //    var showControls = { 'display': 'inline-block' };
                    //    $('#belowTypingSection').css(showControls);
                    //    $('#typeAndSend').css(showControls);
                    //    $('ul#msgList').css('height', $('#dvChatBox').height() - 161);
                    //}
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.someOneIsTypingForVE = function (senderName, senderId, groupID, sndrChatTp)
            {
                try
                {
                    if (typeof chatVE === "undefined")
                        return;

                    var currentRV = getTarget();
                    var chatType = getThisChatType();
                    var show = false;

                    if (chatType == '1' && sndrChatTp == '1' && currentRV == senderId)
                    {
                        show = true;
                    }
                    else if (chatType == '2' && sndrChatTp == '2' && currentRV == groupID)
                    {
                        show = true;
                    }

                    if (show)
                    {
                        $('#dvShowTypingHere span.typeing-text').html(senderName + ' is typing');
                        $('#dvShowTypingHere').css('visibility', 'visible');
                    }
                    else
                        $('#dvShowTypingHere').css('visibility', 'hidden');
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.someOneIsTypedForVE = function (senderId)
            {
                try
                {
                    if (typeof chatVE === "undefined")
                        return;

                    var currentRV = getTarget();
                    if (currentRV == senderId)
                    {
                        $('#dvShowTypingHere').css('visibility', 'hidden');
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                }
            }

            chat.client.sendAsyncForVE = function (receiverId, name, ImagRv, message, ChatType, UniqueID, grpName, nick = '', storedDate = '')
            {
                try
                {
                    if (typeof chatVE === "undefined")
                        return;

                    var myself = getSelfConnectionId();
                    var tempVar = getSelectedSponsor();
                    var date = formatAMPM(new Date());
                    if (pauseChat || (tempVar != '' && tempVar != myself))
                    {
                        //var tempMsg = { receiverId: receiverId, name: name, ImagRv: ImagRv, message: message, ChatType: ChatType, UniqueID: UniqueID, grpName: grpName, nick: nick, date: date };
                        //msgStack.push(tempMsg);
                        return;
                    }

                    var htmlTextMsg =
                        '<li class="magi-chatting-list-item">' +
                        '<div class="magi-chatting-msg-wrapper d-flex left">' +
                        '<div class="magi-chatting-msg">' +
                        '<span class="magiChatAvatarName">' + name + '</span>' +
                        '<div class="magiChatAvararMsg">' +
                        '<p>' + message + '</p>' +
                        '</div>' +
                        '<span class="magiChatAvatarMsgTime">' + (storedDate == '' ? date : storedDate) + '</span>' +
                        '</div>' +
                        '<div class="magi-chatting-avatar">' +
                        '<img src="' + ImagRv + '" alt="" />' +
                        '</div>' +
                        '</div>' +
                        '</li>';

                    var currentReciever = getTarget();
                    if ((currentReciever == '') || (currentReciever == receiverId))
                    {
                        setTarget(receiverId);
                        $("#msgsList").append(htmlTextMsg).scrollTop($("#msgsList").prop('scrollHeight'));
                    }

                    if (ChatType == 1)
                    {
                        appendToListIfNotThere(receiverId, name, ImagRv, message, ChatType, UniqueID, grpName, nick, 0, 0, 0, 0, 0);
                        ///////Send Acknowledgement
                        //chat.server.sendAcknowledgement(myself, receiverId, UniqueID);
                        //chat.server.updateMessageStatus(receiverId, UniqueID, 1, getSelfConnectionId());
                    }
                    document.title = 'MAGI - New message received';
                    ////Move it on the top
                    MoveToTop(receiverId);
                }
                catch (ex)
                {
                    console.log(ex);
                }
            };

            chat.client.showErrorVE = function (ErroMsg)
            {
                console.log(ErroMsg);
            };

            chat.client.adminHideAllChatMsgsTillNow = function (val)
            {
                try
                {
                    if (val)
                    {
                        ClearPanelandChat();
                        alertify.alert('Your all chat messages till now has been hidden by the Admin');
                    }
                    else
                    {
                        alertify.alert('Your all chat messages are visible now, please refresh to access the chat gadget');
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                }
            };

            chat.client.adminBlockedThisUser = function (isBlocked)
            {
                try
                {
                    if (isBlocked)
                    {
                        ClearPanelandChat();
                        alertify.alert('You has been blocked by the admin for chat feature');
                    }
                    else
                    {
                        alertify.alert('Chat feature is now available for you. Please refresh to access the chat gadget');
                    }
                }
                catch (ex)
                {
                    console.log(ex);
                }
            };

            $('#message').on('blur', function ()
            {
                var receiverId = getReceiverId();
                var senderID = getSelfConnectionId();
                var ChatType = getChatType();
                chat.server.typingEnds(receiverId, senderID, ChatType);
            });

            $('#txtSearchAmongRecent').keyup(function ()
            {
                var txt = $(this).val();
                searchAmongRecents(txt);
            });

            $('#message').on('focus', function ()
            {
                typingEvent();
                if ($(this).html() == '' && getChatType() == '1' && $('#message').val() == '' && $('.emoji-menu').css('display') != 'block')
                {
                    if (!nickAdded)
                    {
                        var txt = $('#htargetNick').val();
                        var alternateTxt = $('a#' + getReceiverId() + '_1').attr('nick');
                        var nickname = (txt == '') ? ((IsNotUndefined(alternateTxt) && alternateTxt != '') ? (alternateTxt.trim() + ', ') : '') : txt;
                        setTextInEntry(nickname);
                        nickAdded = true;
                    }
                }
            });

            $('#message').on('keypress', function ()
            {
                typingEvent();
            });

            $('#message').keydown(function ()
            {
                var key = event.keyCode || event.charCode;

                if (key == 8 || key == 46)
                {
                    var receiverId = getReceiverId();
                    var senderID = getSelfConnectionId();
                    var ChatType = getChatType();
                    chat.server.typingEnds(receiverId, senderID, ChatType);
                }
                else if (key == 191)
                {
                    var sentence = $(this).html();
                    var myLastWord = lastWord(sentence);
                    if (myLastWord == '/')
                    {
                        var alternatenick = $('#htargetNick').val();
                        alternatenick = IsNotUndefined(alternatenick) ? alternatenick : '';
                        var nickForTarget = $('a#' + getReceiverId() + '_1').attr('nick');
                        var nickname = (IsNotUndefined(nickForTarget) && nickForTarget != '') ? nickForTarget : alternatenick;

                        var n = sentence.lastIndexOf(myLastWord);
                        sentence = sentence.slice(0, n) + sentence.slice(n).replace('/', nickname);
                        setTextInEntry(sentence);
                        placeCaretAtEnd(document.querySelector('#message'));
                        return false;
                    }
                }
                else if (key == 32)
                {
                    var sentence = $(this).html();
                    var myLastWord = lastWord(sentence);
                    var txt = getChatPhrases(myLastWord);
                    if (txt != null && txt != '')
                    {
                        var n = sentence.lastIndexOf(myLastWord);
                        sentence = sentence.slice(0, n) + sentence.slice(n).replace(myLastWord, txt);
                        setTextInEntry(sentence);
                        placeCaretAtEnd(document.querySelector('#message'));
                        return false;
                    }
                }
            });

            $('#message').on('focus', function ()
            {
                placeCaretAtEnd(document.querySelector('#message'));
                var rID = getReceiverId();
                var indx = searchInArray(conversations, rID, '1');
                if (IsNotUndefined(indx))
                {
                    var myself = getSelfConnectionId();
                    var talks = conversations[indx].talks;
                    var ChatType = parseInt(getChatType());

                    $(talks).each(function (i, m)
                    {
                        if (ChatType == 1 && m.ak == false && m.mine == false)
                        {
                            m.ak = true;
                            chat.server.sendAcknowledgementForSeen(myself, rID, m.mid);
                            chat.server.updateMessageStatus(rID, m.mid, 2, getSelfConnectionId());
                        }
                    });
                }
            });

            /////////////The Section starts here.............

            $.connection.hub.transportConnectTimeout = 30000;
            $.connection.hub.logging = true;

            $.connection.hub.disconnected(function ()
            {
                if ($.connection.hub.lastError)
                {
                    console.log("You has been disconnected. please refresh the page again");
                    console.log(new Date());
                }
                setTimeout(function ()
                {
                    $.connection.hub.start({ transport: ['serverSentEvents', 'foreverFrame', 'longPolling', 'webSockets'] }).done(function ()
                    {
                        console.log("Connected, transport = " + $.connection.hub.transport.name);
                        var userId = getSelfConnectionId();
                        var name = getMyName();
                        var uri = window.location.pathname;
                        chat.server.onconnected(userId, getMySession(), name, uri, false);
                        console.log(new Date());

                    }).fail(function (e) { console.log("Not Connected, transport error occurred."); });
                }, 5000);// Restart connection after 5 seconds.
            });

            //$.connection.hub.start().done(function ()
            $.connection.hub.start({ transport: ['serverSentEvents', 'foreverFrame', 'longPolling', 'webSockets'] }).done(function ()
            {
                console.log("Connected, transport = " + $.connection.hub.transport.name);
                var userId = getSelfConnectionId();
                var name = getMyName();
                var uri = window.location.pathname;
                chat.server.onconnected(userId, getMySession(), name, uri, true);
                console.log(new Date());

            }).fail(function (e) { console.log("Not Connected, transport error occurred."); });

            /////////////The Section ends here.............
        });

        function GetinfoAboutRecentChats(chat_id)
        {
            try
            {
                var infoAbtThisPerson = null;
                for (var i = 0; i < infoAboutRecentChats.length; i++)
                {
                    if (infoAboutRecentChats[i].ID === chat_id)
                    {
                        infoAbtThisPerson = infoAboutRecentChats[i];
                        break;
                    }
                }
                return infoAbtThisPerson;
            }
            catch (ex)
            {
                console.log(ex);
                return null;
            }
        }

        function placeCaretAtEnd(el)
        {
            el.focus();
            if (typeof window.getSelection != "undefined"
                && typeof document.createRange != "undefined")
            {
                var range = document.createRange();
                range.selectNodeContents(el);
                range.collapse(false);
                var sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
            } else if (typeof document.body.createTextRange != "undefined")
            {
                var textRange = document.body.createTextRange();
                textRange.moveToElementText(el);
                textRange.collapse(false);
                textRange.select();
            }
        }

        function IsOnVirtualEvent()
        {
            try
            {
                var pageName = window.location.pathname.toString().toUpperCase();
                if (
                    pageName.includes('VIRTUALEVENT')
                    //||
                    //    pageName.includes('VIEWMYSCHEDULE') ||
                    //    pageName.includes('CREATEMYSCHEDULE') ||
                    //    pageName.includes('MYREMINDERS')
                )
                {
                    return true;
                }
                else
                    return false;
                //return (typeof chatVE !== "undefined");
            }
            catch (ex)
            {
                throw ex;
            }
        }

        function PlaySound()
        {
            var sound = document.getElementById('playWavSound');
            //document.getElementById("playWavSound").volume = 0.2;
            sound.volume = 0.2;
            sound.play();
        }

        function typingEvent()
        {
            try
            {
                var v = $('#message').val();
                if (v != '')
                {
                    var receiverId = getReceiverId();
                    var name = getMyName();
                    var senderID = getSelfConnectionId();
                    var ChatType = getChatType();
                    chat.server.typingStarts(receiverId, name, senderID, ChatType);
                }
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function hideThisMsg(mid, hide)
        {
            try
            {
                chat.server.hideThisMessage(getSelfConnectionId(), mid, hide);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function hideAllMsg(Acckey, ToPK, Conversationdate, HiddenToAcc, HiddenToSecond_Acc, typeOfPerson)
        {
            try
            {
                var myId = getSelfConnectionId();
                var eventKey = getCurrentEvent();
                chat.server.hideAllMessages(myId, Acckey, ToPK, Conversationdate, eventKey, HiddenToAcc, HiddenToSecond_Acc, typeOfPerson);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function openMyVideoChat(urlkey)
        {
            try
            {
                chat.server.openVideoChat(getSelfConnectionId(), getActiveEvent(), urlkey);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function setInMingle(val)
        {
            inMingle = val;
        }

        function OpenMyChat(userchatId, name, ChatType, ntfy = 0, topicName = '', msgTxt = '')
        {
            try
            {
                if (ChatType == 2)
                    return;

                setTextInEntry(null);
                var selfId = getSelfConnectionId();

                //if (!viewingOthersChat())
                if (userchatId != selfId)
                {
                    if (IsNotUndefined(chat))
                    {
                        $('#hPageReceiverID').val(userchatId);

                        chat.server.getReceiver(userchatId, ChatType, selfId, ntfy, topicName, msgTxt, getActiveEvent());

                        if (ntfy == 1)
                        {
                            inMingle = true;
                        }

                        if (ChatType == 2)
                        {
                            $('#topImgSender').css('background-image', 'url(/Images/Icons/theGroupIcon.png)').css('display', 'inline-block');
                            $('#topMainSender').html(name);   //HR
                            appendLeftPanel(userchatId, name, null, ChatType, true, '', null);    //HR
                            $('#' + userchatId + '_' + ChatType).click();               //HR
                        }
                    }
                    else
                        console.log('You are not connected to chat server');

                    resetFbFriendList();
                    setWindowWidth();
                }
            }
            catch (ex)
            {
                //alertify.alert('Connecting to the chat server...');
                console.log(ex);
            }
        }

        function CloseRFWindow()
        {
            $('#rapidFireWindow').slideUp(100);
        }

        function RFNextPerson()
        {
            aRandomNumber++;
            if (rapidChatList.length > aRandomNumber)
                SetDataWithObjForRF(rapidChatList[aRandomNumber]);
            else
            {
                aRandomNumber = 0;
                SetDataWithObjForRF(rapidChatList[aRandomNumber]);
            }
        }

        function RFPreviousPerson()
        {
            aRandomNumber--;
            if (aRandomNumber >= 0)
                SetDataWithObjForRF(rapidChatList[aRandomNumber]);
            else
            {
                aRandomNumber = rapidChatList.length - 1;
                SetDataWithObjForRF(rapidChatList[aRandomNumber]);
            }
        }

        function RapidFire_click()
        {
            try
            {
                var hide = { 'display': 'none' };
                var show = { 'display': 'inline-block' };

                $('#btnRFNext').css(hide);
                $('#btnRFPrevious').css(hide);
                $('#btnRFConnect').css(hide);

                $('#rapidFireWindow').slideToggle(200, function ()
                {
                    //if (!$('#rapidFireWindow').is(':hidden') && (rapidChatList.length <= 0))
                    if (!$('#rapidFireWindow').is(':hidden'))
                    {
                        chat.server.fetchRapidFirePeople(getSelfConnectionId(), getCurrentEvent(), parseInt($('#hIsDemo').val()));
                        RapidFireSplash(true);
                    }

                    var widthOfWindow = $(this).width();
                    var marginForLeft = widthOfWindow / 2;

                    $(this).css('margin-left', -marginForLeft);
                });

                //if (rapidChatList.length > 0)
                //{
                //    if (rapidChatList.length > 1)
                //    {
                //        $('#btnRFNext').css(show);
                //        $('#btnRFPrevious').css(show);
                //    }
                //    $('#btnRFConnect').css(show);
                //}
            }
            catch (ex)
            {
                console.log(ex);
                alertify.alert('An error occurred, Please try after some time!');
            }
        }

        function getRandomInt(max)
        {
            return Math.floor(Math.random() * max);
        }

        function RapidFireSplash(val)
        {
            var show = { 'display': 'inline-block' };
            var hide = { 'display': 'none' };

            if (val)
            {
                $('#rpdSplash').css(show);
            }
            else
            {
                $('#rpdSplash').css(hide);
            }
        }

        function SetDataWithObjForRF(o)
        {
            try
            {
                var hide = { 'display': 'none' };
                var show = { 'display': 'inline-block' };

                var d = o;
                $('#btnRFNext').css(hide);
                $('#btnRFPrevious').css(hide);
                $('#btnRFConnect').css(hide);
                if (isNotNullOrEmpty(d))
                {
                    $('#RFProfilePic').prop('src', '').prop('src', d.image.replace('~', ''));
                    $('#RFName').html(d.name);
                    $('#RFJob').html(d.title);
                    $('#RFDept').html(d.dept);
                    $('#RFOrg').html(d.org);
                    $('#RFBio').html(d.bio);
                    //$('#btnRFConnect').attr('AccID', d.ID);
                    //$('#btnRFConnect').attr('AccRealName', d.name);

                    $('#btnRFConnect').off('click');
                    $('#btnRFConnect').on('click', function ()
                    {
                        try
                        {
                            //chat.server.requestForConnectByRF(getSelfConnectionId(), getMyName(), d.ID);
                            OpenChat(d.ID, '', 1);
                            $('#rapidFireWindow').slideUp(100);
                            //alertify.alert('Request sent for rapid chat');
                        }
                        catch (ex)
                        {
                            console.log(ex);
                            alertify.alert('An error occurred, Please try after some time!');
                        }
                    });

                    $('#btnRFConnect').css(show);

                    if (rapidChatList.length > 1)
                    {
                        $('#btnRFNext').css(show);
                        $('#btnRFPrevious').css(show);
                    }
                }
                ///////////////////////////////////////////////
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function resetFbFriendList()
        {
            $('#wndFBFriends').css('display', 'none');
            if ((typeof chatVE !== "undefined"))
            {
                $('.magiChattingLeftWrapper').css('width', '100%');
            }
        }

        function setNewToTop()
        {
            $('#leftPanel a .clsNewOne:visible').each(function (i, o)
            {
                $(this).parent().parent().prependTo('#leftPanel ul');
            });

            if ($('#ulChatListLeftPanel li a.slcted').length <= 0)
            {
                var lastLink = getCookie("YourLastChat");
                if (lastLink == '' || lastLink == 'null' || lastLink == null || !IsNotUndefined(lastLink))
                {
                    $('#leftPanel a:eq(0)').click();
                }
                else
                {
                    $(lastLink).click();
                }
            }
        }

        function CheckWhetherInRpdList()
        {
            try
            {
                if (inMingle)
                    return true;

                for (var l = 0; l < rapidChatList.length; l++)
                {
                    if (rapidChatList[l].ID == getReceiverId())
                    {
                        return true;
                    }
                }
            }
            catch (ex)
            {
                console.log(ex);
            }
            return false;
        }

        function sendMyMessage()
        {
            try
            {
                if (getOptOut())
                    return;

                var msg = $('#message').val();
                if (isNotNullOrEmpty(msg))
                {
                    var txt = $('#message').val(); //$('.emoji-wysiwyg-editor.mytext').html();
                    txt = txt.replaceAll('<div><br></div>', '');
                    $('#message').val(txt);
                    msg = $('#message').val();
                    msg = textValitator(msg);
                    var clsAvatarSndr = $('#hclsAvatarSndr').val();

                    var guid = createGuid();
                    var ChatType = getChatType();
                    var msgObj = { MsgType: 0, strMsg: msg, name: '', img: clsAvatarSndr, mid: guid, msgSt: 0, mine: true, ak: false, timeOfMsg: '' };

                    var grpName = (ChatType == "1") ? '' : $('#topMainSender').html();
                    chat.server.send(getSelfConnectionId(), getReceiverId(), getMyName(), clsAvatarSndr, msgObj.strMsg, ChatType, guid, grpName, getmyNickName(), false);

                    $('data[id=' + getReceiverId() + ']').closest('span.galImages').remove();

                    insertChat("me", msg, ChatType, guid);

                    setTextInEntry(null);

                    if (!callForFB && !CheckWhetherInRpdList())
                    {
                        var isDemo = parseInt($('#hIsDemo').val());
                        chat.server.getFBFriendsList(getSelfConnectionId(), getCurrentEvent(), isDemo);
                        callForFB = true;
                    }
                    else if (!CheckWhetherInRpdList())
                    {
                        clearTimeout(showFBagain);
                        showFBagain = setTimeout(function ()
                        {
                            setpositionAndshow();
                        }, 3000);
                    }

                    $('#btnMakeConnection').addClass('animateClass');
                    $('#' + getReceiverId() + '_1').find('span.clsNewOne').css('display', 'none');
                    $('li[data-key="' + getReceiverId() + '"] span.clsNewMsg').css('display', 'none');
                    $('#' + getReceiverId() + '_' + ChatType).parent().prependTo('#leftPanel ul');

                    if (typeof MoveToTop === 'function')
                    {
                        MoveToTop(getReceiverId());
                    }

                    var receiverId = getReceiverId();
                    var senderID = getSelfConnectionId();
                    var ChatType = getChatType();
                    chat.server.typingEnds(receiverId, senderID, ChatType);
                }
                $('.emoji-menu').slideUp(100);
            }
            catch (ex)
            {
                throw ex;
            }
        }

        function getMsgFromTarget()
        {
            try
            {
                //var msg = $('#<%=hdnmsg.ClientID%>').val();
                //var targetName = $('#<%=hdntargetName.ClientID%>').val();
                //var senderImage = $('#<%=hdnsenderImage.ClientID%>').val();
                //var nickName = $('#<%=hdnnickName.ClientID%>').val();

                //chat.server.getMsgFromTarget(getSelfConnectionId(), getReceiverId(), targetName, senderImage,
                //    msg, nickName, getMyName(), getCurrentEvent());
            }
            catch (ex)
            {
                console.log(ex);
            }
            return false;
        }

        function addMessageEventListeners()
        {
            $('#sendmessage').off('click');
            $('#sendmessage').on('click', function ()
            {
                try
                {
                    sendMyMessage();
                }
                catch (ex)
                {
                    console.log(ex);
                    CommonFunctions.Alert('Error in sending the message! please initialize the chat again');
                }
            });

            $("#message").on("keyup", function (e)
            {
                if (e.which == 13)
                {
                    try
                    {
                        sendMyMessage();
                    }
                    catch (ex)
                    {
                        console.log(ex);
                    }
                }
            });

            $('#btnCloseBIO').on('click', function ()
            {
                //HR
                //var wndow = $find("<%= rwBioRadwindowForChat.ClientID%>");
                //wndow.hide();
                //$('#bioPreloader').css('display','none');
            });

            //$('#btnSendConReq').on('click', function()
            //{
            //    $('#btnMakeConnection').click();
            //    hideConReqWindow();
            //    sendMyMessage();
            //});

            //$('#btnNotToSendConReq').on('click', function()
            //{
            //    $('#btnMakeConnection').css('display','inline-block');
            //    hideConReqWindow();
            //    sendMyMessage();
            //});
        }


        function hideConReqWindow()
        {
            try
            {
                //HR var wndow = $find("<%= rwRequestConfirmation.ClientID%>");
                //HR wndow.hide();
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function formatAMPM(d)
        {
            var tempDate = new Date(d.getUTCFullYear(), d.getUTCMonth(),
                d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds());

            var date = new Date(tempDate.setHours(tempDate.getHours() - (parseFloat(@Model.TimeZoneDiff))));

            var hours = date.getHours();
            var minutes = date.getMinutes();
            var ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12;
            hours = hours ? hours : 12; // the hour '0' should be '12'
            minutes = minutes < 10 ? '0' + minutes : minutes;
            var theCountOfDate = (date).getDate();
            var theMonth = (date).getMonth() + 1;
            var strTime = hours + ':' + minutes + ' ' + ampm + ' ' + getStandardTimeCode() + ' ' + theMonth.toString() + '/' + theCountOfDate;
            return strTime;
        }

        function refreshSuggestedPeople()
        {
            try
            {
                var isDemo = parseInt($('#hIsDemo').val());
                chat.server.getFBFriendsList(getSelfConnectionId(), getCurrentEvent(), isDemo);
                return false;
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function ClearPanelandChat()
        {
            clearLeftPanel();
            clearEveryThing();
        }

        function clearLeftPanel()
        {
            $('#ulChatListLeftPanel').empty();
            hideChatWindow();
        }

        function hideChatWindow()
        {
            $('#exampleModal').css('display', 'none').removeClass('show');
        }

        function appendLeftPanel(receiverId, name, msgs, ChatType, isMine, nick, topImage)
        {
            var exists = searchInArray(conversations, receiverId, ChatType);
            if (!IsNotUndefined(exists))
            {
                insertConversation(receiverId, name, msgs, ChatType, isMine, topImage);

                if (isMine)
                {
                    leftPanelDesignAppend(receiverId, name, ChatType, nick, topImage);
                }
            }
            else
            {
                var length = $('#' + receiverId + '_' + ChatType).length;
                if (isMine && length == 0)
                {
                    leftPanelDesignAppend(receiverId, name, ChatType, nick, topImage);
                }
            }

            try
            {
                if (ChatType == 1 && msgs != null)
                {
                    var found = false;
                    for (var i = 0; i < msgs.length; i++)
                    {
                        if ((msgs[i].mine == false) && (msgs[i].msgSt != 2))
                        {
                            found = true;
                            break;
                        }
                    }

                    //var i = msgs.length - 1;
                    //if (msgs[i].mine == false)
                    //{
                    //    $('#' + receiverId + '_' + ChatType + ' span.clsNewOne').css('display', 'inline-block');
                    //}

                    if (found)
                    {
                        $('#' + receiverId + '_' + ChatType + ' span.clsNewOne').css('display', 'inline-block');
                        offAnimate();
                        animateNewMsg();
                    }
                }
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function leftPanelDesignAppend(receiverIdd, name, ChatType, nick, topImage)
        {
            var ImagRv = '';
            if (ChatType == 1)
            {
                ImagRv = topImage;

                var selfConnectionId = getSelfConnectionId();
                var currentEvent = getCurrentEvent();
                chat.server.getConnectionIcon(selfConnectionId, receiverIdd, currentEvent);
                chat.server.getEventSponsorStatus(receiverIdd, getCurrentEvent());
            }
            else if (ChatType == 2)
                ImagRv = '/Images/Icons/theGroupIcon.png';

            var recievedFrom =
            '<li>' +
                '<a id="' + receiverIdd + '_' + ChatType + '" datatype="' + ChatType + '" dataId="' + receiverIdd + '" nick="' + nick + '" class="d-flex align-items-center px-3 py-2 ">' +
                '<span class="clsNewOne" title="New message arrived"></span>' +
                '<span class="magi-chat-user-icon">' +
                '<span class="magi-chat-user-image ancImg" style="background: url(' + ImagRv + ');">' +
                '</span>' +
                '</span>' +
                '<span class="magi-chat-user-name ps-3">' + name + '</span>'
                '</a>'
            '</li>';

            $("#leftPanel ul").append(recievedFrom);

            var strChatLink = '#' + receiverIdd + '_' + ChatType;
            $(strChatLink).on('click', function ()
            {
                $('div#thirdDivision span.magiChatMemberOnline input').css('display', 'none');
                nickAdded = false;
                setTextInEntry('');
                if ($('#message').val() == '' || $('#message').val() === undefined)
                {
                    setCookieForChat("YourLastChat", strChatLink);
                    $('#leftPanel a').css('background', 'none');
                    $('#leftPanel a').removeClass('slcted');

                    var receiverId = $(this).attr('dataId');
                    $('#hPageReceiverID').val(receiverId);

                    var datatype = $(this).attr('datatype');
                    if (IsNotUndefined(datatype))
                    {
                        $('#hChatType').val(datatype);
                        clearbuttonsfromHeader();

                        if (datatype == '2')
                        {
                            var groupId = getReceiverId();
                            var mySelf = getSelfConnectionId();

                            var btnExitGroup = $('<input/>', {
                                id: "btnExitGroup",
                                type: "image",
                                //src: "/Images/Icons/LeaveThisChat.png",
                                src: "/Images/Icons/leave.png",
                                alt: "Leave Chat",
                                title: "Leave Chat",
                                style: "vertical-align: bottom;height:30px"
                            });

                            $('#MainHeaderOfChat #dvForExitDelete').append(btnExitGroup);
                            $('#btnExitGroup').off('click');
                            $('#btnExitGroup').on('click', function ()
                            {

                                chat.server.exitGroup(groupId, mySelf);

                                var existance = searchInArray(conversations, groupId, '2');
                                if (IsNotUndefined(existance))
                                {
                                    conversations[existance].isMineNow = 0;
                                    $('#' + groupId + '_2').remove();
                                    $('#btnExitGroup').remove();

                                    clearEveryThing();
                                }

                                groupId = groupId.replace(/\D/g, "");
                                var cntControlForGroup = $('span[id*=btnJoinThisGroup][dataIdForButton=' + groupId + ']').closest('tr').find('.JoinedCnt');

                                var val = parseInt(cntControlForGroup.html());
                                if (val > 0)
                                {
                                    val = val - 1;
                                }
                                cntControlForGroup.html(val);
                                $('span[id*=btnJoinThisGroup][dataIdForButton=' + groupId + ']').html('Join');
                                return false;
                            });

                            var currentEvent = getCurrentEvent();
                            var activeEvent = getActiveEvent();
                            chat.server.getVideoMeetingLink(mySelf, groupId, currentEvent, activeEvent);
                        }
                        else
                        {
                            ///////////////////////For Adding the Nick Name..............
                            $('#htargetNick').val('');
                            var nickname = $(this).attr('nick');
                            nickname = (IsNotUndefined(nickname) && nickname != null && nickname != '') ? (nickname.trim() + ', ') : '';

                            if (nickname != '')
                            {
                                $('#htargetNick').val(nickname);
                            }
                            else
                            {
                                var firstName = firstWord(name);
                                firstName = (firstName != null && firstName != '') ? (firstName.trim() + ', ') : '';
                                $('#htargetNick').val(firstName);
                            }

                            ////////////////////////////////For deleting the chat...........
                            var btnDeleteChat = $('<input/>', {
                                id: "btnDeleteChat",
                                type: "image",
                                width: "30",
                                height: "30",
                                src: "/Images/Icons/leave.png",
                                alt: "Leave Chat",
                                title: "Leave Chat",
                                style: "vertical-align: bottom;height:30px"
                            });

                            $('#MainHeaderOfChat #dvForExitDelete').append(btnDeleteChat);
                            $('#btnDeleteChat').off('click');
                            $('#btnDeleteChat').on('click', function ()
                            {
                                var mySelf = getSelfConnectionId();
                                chat.server.deleteMyChat(mySelf, receiverId);

                                var existance = searchInArray(conversations, receiverId, '1');
                                if (IsNotUndefined(existance))
                                {
                                    conversations[existance].isMineNow = 0;
                                    $('#' + receiverId + '_1').remove();
                                    $('#btnDeleteChat').remove();
                                    clearEveryThing();
                                }
                                return false;
                            });

                            if (getOptOut())
                                return;

                            var notallowedforconnections = false;
                            var myId = getSelfConnectionId();
                            if (viewingOthersChat())
                                notallowedforconnections = true;

                            if ((new Date(getLastDateOfEvent())) < (new Date()))
                                notallowedforconnections = true;

                            var TargetId = getReceiverId();
                            var currentEvent = getCurrentEvent();
                            var isDemo = parseInt($('#hIsDemo').val());
                            var isPartner = (getIsPartner() == 'True') ? 1 : 0;
                            var org = getMyOrganization();
                            var activeEvent = getActiveEvent();

                            if (!notallowedforconnections)
                            {
                                chat.server.getButtonForMeet(myId, myId, TargetId, currentEvent, org, activeEvent);
                            }
                            chat.server.getButtons(myId, TargetId, currentEvent, isDemo, 1, isPartner, org, activeEvent);
                        }
                    }
                    else
                        $('#hChatType').val('1');

                    var imgSrc = $(this).find('span.ancImg').css('background-image');
                    imgSrc = imgSrc.replace('url(', '').replace(')', '').replace(/\"/gi, "")
                        .replace(", url(" + (window.location.href).replace(window.location.pathname, "") + "/Images/Icons/avatar.jpg)", "");

                    //var name = $(this).find('.magiVirtualCatListName').html();
                    $('#topImgSender').css('background-image', 'url(' + imgSrc + ')').css('display', 'inline-block');
                    $('#topMainSender').html(name);

                    var indx = searchInArray(conversations, receiverId, ChatType);
                    if (IsNotUndefined(indx))
                    {
                        var talks = conversations[indx].talks;
                        $('ul#msgList').empty();

                        //var imgForHisMsg = '/accountimages/' + conversations[indx].ID + '_img.jpg';

                        var myself = getSelfConnectionId();
                        $(talks).each(function (i, m)
                        {
                            var FormatedMsg = formatMessages(m.mine, m.strMsg, m.name, m.mid, m.img.replace('~', ''), m.timeOfMsg, m.MsgType);
                            $('ul#msgList').append(FormatedMsg);

                            if (m.mine == true)
                            {
                                if (m.msgSt == 1)
                                {
                                    $('#' + m.mid).html('Sent');
                                }
                                else if (m.msgSt == 2)
                                {
                                    $('#' + m.mid).html('Seen');
                                }
                            }

                            if (!initialStg && ChatType == 1 && m.ak == false && m.mine == false)
                            {
                                m.ak = true;
                                chat.server.sendAcknowledgementForSeen(myself, receiverId, m.mid);
                                chat.server.updateMessageStatus(receiverId, m.mid, 2, getSelfConnectionId());
                            }
                        });
                        scrollToBottom();

                        if (talks.length <= 0)
                            notifyAboutNoConversation('No chat messages yet');
                    }
                    $(this).css('background', 'aquamarine');
                    $(this).addClass('slcted');
                    if (!initialStg)
                    {
                        $(this).find('span.clsNewOne').css('display', 'none');
                    }
                    initialStg = false;
                    //}
                    //else if (receiverIdd != getReceiverId())
                    //{
                    //    alertify.alert('Please clear the message input first in order to switch chat');
                    //}
                }
            });

            //$('#typeAndSend').css('display', 'flex');

            var prop = $("#exampleModal").css('display');
            if (prop != 'block')
            {
                $('#icon-cover').css('display', 'inline-block');
            }
        }

        function insertConversation(Id, name, msg, ChatType, isMine, topImage)
        {
            try
            {
                var cnvrsId = Id.toString();
                var result = searchInArray(conversations, Id.toString(), ChatType);

                if (IsNotUndefined(result))
                {
                    ////To clear Temp Text when chat initialized........
                    if ((conversations[result]).talks.length <= 0)
                    {
                        $('ul#msgList li[tempReqMsg]').remove();
                    }

                    (conversations[result]).talks.push(msg);
                    var myID = getSelfConnectionId();

                    if (msg.mine)
                    {
                        var eventKey = parseInt(getCurrentEvent());
                        chat.server.saveChat(myID, Id, ChatType, (conversations[result]).nm, msg, getMyName(), eventKey, 0);
                    }
                }
                else
                {
                    var t = msg == null ? [] : msg;
                    var conversationObject =
                    {
                        ID: cnvrsId, nm: name, img: topImage, talks: t, ChtType: ChatType, isMineNow: isMine, reqVar: 0
                    };
                    conversations.push(conversationObject);
                }
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function searchInArray(myArray, parakey, ChatType)
        {
            var key = parakey.toString();// + '_' + ChatType;
            var result = 'undefined';
            for (var i = 0; i < myArray.length; i++)
            {
                if (myArray[i].ID === key)
                {
                    result = i;
                    break;
                }
            }
            return result;
        }

        function insertChat(who, text, ChatType, UniqueID)
        {
            try
            {
                var control = "";
                var date = formatAMPM(new Date());
                var clsAvatarSndr = $('#hclsAvatarSndr').val();

                var theText =

                    '<li class="d-flex justify-content-between p-2 flex-row-reverse">' +
                    '<span class="magi-chat-user-icon">' +
                    '<span class="magi-chat-user-image clsAvatarSndr" style="background-image: url(' + clsAvatarSndr + ');">' +
                    '</span>' +
                    '</span>' +
                    '<span class="magi-chat-user-text-wapper p-3 flex-grow-1">' +
                    '<span class="magi-chat-list-user-name">Me</span>' +
                    '<span class="magi-chat-user-text">' + text + '</span>' +
                    '<small class="magi-chat-user-msg-time"><b id=' + UniqueID + ' style="font-size: 11px;margin-right: 10px;"></b>' + date + '</small>' +
                    '</span>' +
                    '</li>';

                control = {
                    MsgType: 0, strMsg: text, name: '', img: clsAvatarSndr, mid: UniqueID, msgSt: 0, mine: true, ak: false, timeOfMsg: date
                };

                setTimeout(
                    function ()
                    {
                        $("#msgList").append(theText).scrollTop($("#msgList").prop('scrollHeight'));
                    }, 0);

                //////////////////////////////////
                var currentRecieverID = getReceiverId();
                insertConversation(currentRecieverID, who, control, ChatType, true, null, null);
            }
            catch (ex)
            {
                throw ex;
            }
        }

        function getIsPartner()
        {
            var hIsPartner = $('#hIsPartner').val();
            return hIsPartner;
        }

        function getReceiverId()
        {
            var rId = $('#hPageReceiverID').val();
            return rId;
        }

        function getChatType()
        {
            var Ctype = $('#hChatType').val();
            return parseInt(Ctype);
        }

        function setInSession(val)
        {
            $('#hValueForSession').val(val);
            if (val == 1)
            {
                chat.server.setInSessionInAllTabs(true, getSelfConnectionId());
            }
        }

        function getMyOrganization()
        {
            return "@Model.Organization_key";
        }

        function getMyOrganizationName()
        {
            return "@Model.MyOrganization";
        }

        function IsThisUserEventSponsor(idToCheck)
        {
            var isEventSponsor = $('#ulChatListLeftPanel li a[dataid="' + idToCheck + '"]').attr("isEventSponsor");
            return isEventSponsor === '1';
        }

        function getmyNickName()
        {
            if (typeof getSelectedSponsor === 'function')
            {
                var val = getSelectedSponsor();
                if (val != null && val != '' && val != "<%=fcConferenceManager.clsChatwee.strChatID()%>")
                    return '';
            }

            var MyNickName = $('#hMyNickName').val();
            var valueNeedToReturn = (MyNickName == null || MyNickName == '') ? $('#hMyFirstName').val() : MyNickName;
            return valueNeedToReturn;
        }

        function removeButtonsFromDiv(btnId)
        {
            $('#MainHeaderOfChat #' + btnId).remove();
        }

        function setCustomPosition(sender, args)
        {
            //sender.moveTo(sender.get_left(), sender.get_top());
        }

        function THClose()
        {
            //HR
            //var wnd = $find('<%=rwTreasureHunt.ClientID %>');
            //wnd.hide();
            //$('div[id*="rdChatWindow"].RadWindow.rwShadow').css('z-index','99999999999999');
            //$('div[id*="rwTreasureHunt"].RadWindow.rwShadow').css('z-index','9999');
            return false;
        }

        function treasureHuntDone()
        {
            try
            {
                //HR
                //var wnd = $find('<%=rwTreasureHunt.ClientID %>');
                //wnd.hide();
                //$('div[id*="rdChatWindow"].RadWindow.rwShadow').css('z-index','99999999999999');
                //$('div[id*="rwTreasureHunt"].RadWindow.rwShadow').css('z-index', '9999');
                chat.client.getbuttonsAgain();
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function removeAllConRelateBtns()
        {
            removeButtonsFromDiv('btnMakeConnection');
            removeButtonsFromDiv('btnAccepted');
            removeButtonsFromDiv('btnPending');
            removeButtonsFromDiv('btnDeclined');
            removeButtonsFromDiv('ShowConnectionButton');
        }

        function textValitator(inputText)
        {
            try
            {
                inputText = inputText.replace(
                    /((http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?)/g,
                    '<a href="$1" target="_blank">$1<a/>'
                );

                rex = /(["'>:]?)([\w.-]+@@[\w.-]+\.[\w.-]+)/gi;

                inputText = inputText.replace(rex, function ($0, $1)
                {
                    return $1 ? $0 : '<a href="mailto:' + $0 + '">' + $0 + '</a>';
                });

                return inputText;
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function notifyMsg(msgText, appendTo)
        {
            var msgControl = '<li style="width: 100%;">' +
                '<div class="notifyMsgDiv">' +
                '<p class="notifyMsgParagraph">' + msgText + '</p>' +
                '</div>' +
                '</li>';

            $(appendTo).append(msgControl);
            scrollToBottom();
        }

        function notifyAboutNoConversation(msgText)
        {
            var msgControl = '<li tempReqMsg style="width: 100%;">' +
                '<div class="notifyMsgDiv">' +
                '<p style="font-weight: 500;font-size:18px;background: none;" class="notifyMsgParagraph">' + msgText + '</p>' +
                '</div>' +
                '</li>';

            $('ul#msgList').append(msgControl);
            scrollToBottom();
        }

        function scrollToBottom()
        {
            $('#msgList').animate({ scrollTop: $('#msgList').prop("scrollHeight") }, 100);
        }

        //////////Formate Messages...............
        function formatMessages(isThisMine, msg, name, UniqueID, imgUrl, dateOfMsg, MsgType)
        {
            var strMsgString = '';

            if (MsgType == 0)
            {
                if (isThisMine)
                {
                    strMsgString =
                        '<li class="d-flex justify-content-between p-2 flex-row-reverse">' +
                        '<span class="magi-chat-user-icon">' +
                        '<span class="magi-chat-user-image clsAvatarSndr" style="background-image: url(' + imgUrl + ');">' +
                        '</span>' +
                        '</span>' +
                        '<span class="magi-chat-user-text-wapper p-3 flex-grow-1">' +
                        '<span class="magi-chat-list-user-name">Me</span>' +
                        '<span class="magi-chat-user-text">' + msg + '</span>' +
                        '<small class="magi-chat-user-msg-time"><b id=' + UniqueID + ' style="font-size: 11px;margin-right: 10px;"></b>' + dateOfMsg + '</small>' +
                        '</span>' +
                        '</li>';
                }
                else
                {
                    strMsgString =
                        '<li class="d-flex justify-content-between p-2">' +
                        '<span class="magi-chat-user-icon">' +
                        '<span class="magi-chat-user-image clsAvatarSndr" style="background-image: url(' + imgUrl + ');">' +
                        '</span>' +
                        '</span>' +
                        '<span class="magi-chat-user-text-wapper p-3 flex-grow-1">' +
                        '<span class="magi-chat-list-user-name">' + name + '</span>' +
                        '<span class="magi-chat-user-text">' + msg + '</span>' +
                        '<small class="magi-chat-user-msg-time"><b id=' + UniqueID + ' style="font-size: 11px;margin-right: 10px;"></b>' + dateOfMsg + '</small>' +
                        '</span>' +
                        '</li>';

                    $('div#thirdDivision span.magiChatMemberOnline input').css('display', 'inline-block');
                }
            }
            else
            {
                strMsgString = '<li style="width: 100%;">' +
                    '<div class="notifyMsgDiv">' +
                    '<p class="notifyMsgParagraph">' + msg + '</p>' +
                    '</div>' +
                    '</li>';
            }
            return strMsgString;
        }

        function checkCookie()
        {
            var chatopened = getCookie("chatopened");
            var newMsg = getCookie("newMsg");

            //if (
            //    chatopened == "1" &&
            //    !(IsOnVirtualEvent()) && typeof chatVE === undefined
            //)
            //{
            //    opentheChat();
            //    $('#icon-cover').css('display', 'none');
            //}

            if (newMsg == "1")
            {
                animateNewMsg();
            }
        }

        var myVar;

        function animateNewMsg()
        {
            $('#messengerAction .clsNewOne').fadeOut(200).fadeIn(200).fadeOut(200).fadeIn(200);
            myVar = setTimeout(function () { animateNewMsg(); }, 2000);
        }

        function offAnimate()
        {
            clearTimeout(myVar);
            $('#messengerAction .clsNewOne').fadeOut(200);
        }

        function clearbuttonsfromHeader()
        {
            $('#MainHeaderOfChat input:not(".exceptThese")').remove();
        }

        function clearEveryThing()
        {
            setTextInEntry('');
            $('#topMainSender').html("");
            $('#topImgSender').css('background-image', 'url(/Images/Icons/avatar.jpg)').css('display', 'none');
            $('ul#msgList').empty();
            $('#hPageReceiverID').val('');
            clearbuttonsfromHeader();

            if (getReceiverId() == $('#hInstantConnect').val())
            {
                $('#dvNextUpSection #topicList').remove();
            }

            $('#leftPanel a:eq(0)').click();
        }

        function opentheChat()
        {
            try
            {
                ClickMessengerIcon();
                setNewToTop();

                if (typeof closeAllWindow === 'function')
                {
                    closeAllWindow(null);
                }

                if ($('#typeAndSend').css('display') == "none")
                {
                    $('ul#msgList').css('height', $('#dvChatBox').height() - 120);
                }
                else
                    $('ul#msgList').css('height', $('#dvChatBox').height() - 161);

                setCookieForChat("chatopened", "1");
                $('#chatForAllParent').css('display', 'none');
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function IsChatOpen()
        {
            try
            {
                var shownProp = $('.magiChatWrapper').css('display');
                return !(shownProp != 'block');
            }
            catch (ex)
            {
                console.log(ex);
                return false;
            }
            return false;
        }

        function addEventListenerForShowingInfo()
        {
            $('ul#ulChatListLeftPanel li').off('mouseenter');
            $('ul#ulChatListLeftPanel li').on('mouseenter', function (event)
            {
                try
                {
                    //var ID = $(this).find('a').attr('dataid');
                    //var information = GetinfoAboutRecentChats(ID);

                    //if (information != null)
                    //    setAndShowByObject(information, event);
                }
                catch (ex)
                {
                    console.log(ex);
                }
            });

            $('ul#ulChatListLeftPanel li').on('mouseleave', function ()
            {
                setAndShow(null, false, event, false);
            });
        }

        function searchAmongRecents(searchedString)
        {
            try
            {
                searchedString = searchedString.toUpperCase();

                if (searchedString != '' && searchedString != null)
                {
                    $('ul#ulChatListLeftPanel li').each(function (i, o)
                    {
                        if ($(this).find('span.magiVirtualCatListName').html().toUpperCase().includes(searchedString))
                        {
                            $(this).slideDown();
                        }
                        else
                            $(this).slideUp();
                    });
                }
                else
                {
                    $('ul#ulChatListLeftPanel li').slideDown();
                }
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function showAllChats(ControlObj)
        {
            try
            {
                var isChecked = $(ControlObj).prop('checked');
                $('#leftPanel ul').empty();
                if (isChecked)
                {
                    $(conversations).each(function (i, o)
                    {
                        if (!o.isMineNow)
                        {
                            leftPanelDesignAppend(o.ID, o.nm, o.ChtType, '', o.img);
                        }
                    });
                }
                else
                {
                    $(conversations).each(function (indx, obj)
                    {
                        if (obj.isMineNow)
                        {
                            appendLeftPanel(obj.ID, obj.nm, obj.talks, obj.ChtType, obj.isMineNow, "", obj.img.replace('~', ''));
                        }
                    });
                }
                clearEveryThing();
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function setTextInEntry(txt)
        {
            try
            {
                //$('.emoji-wysiwyg-editor.mytext').html(txt);
                $('#message').val(txt);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function showTheNextUpTopic(topicName, chngrName)
        {
            if (chngrName != '')
                msg = 'Next Up question: ' + topicName + ' You can change it with the dropdown above.';
            else
                msg = 'Next Up question selected for discussion is <b>' + topicName + '</b>';

            notifyMsg(msg, "ul#msgList");
        }


        function OpenChat(userchatId, name, ChatType, msgTxt = '')
        {
            if (getOptOut())
            {
                alertify.alert("You have choosen to be out of networking options entirely");
                return false;
            }

            if (typeof OpenMyChat === 'function')
            {
                if (parseInt(getCurrentEvent()) == parseInt(getActiveEvent()))
                {
                    OpenMyChat(userchatId, name, ChatType, 0, '', msgTxt);
                    return true;
                }
                else
                {
                    alertify.alert('Active event and selected event are not same.');
                    return false;
                }
            }
            else
                alertify.alert('Sorry, Chat has been disabled for this event for now');

            return false;
        }

        function broadCastMyMessage(id, txtmessage, forstaffOnly, forAttendee)
        {
            try
            {
                var eventKey = getCurrentEvent();
                chat.server.broadcastThisText(id, txtmessage, forstaffOnly, forAttendee, eventKey);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function broadCastThisSession(strSession, openSessionDurationValue)
        {
            try
            {
                chat.server.openSessionForAll(getSelfConnectionId(), strSession, openSessionDurationValue);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function broadCastWelcomeMsg(txtmessage, forstaffOnly)
        {
            try
            {
                //HR chat.server.broadcastThisWelcomeText("<%=fcConferenceManager.clsChatwee.strChatID()%>", txtmessage, forstaffOnly);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function broadCastChatMsg(id, txtmessage, forstaffOnly, forAttendee)
        {
            try
            {
                var clsAvatarSndr = $('#hclsAvatarSndr').val();
                var eventKey = getCurrentEvent();
                chat.server.broadCastThisChatMsg(id, txtmessage, getMyName(), clsAvatarSndr, getmyNickName(), forstaffOnly, forAttendee, eventKey);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function getMyMeetingData()
        {
            try
            {
                var obj = { MeetingId: 'xxxx', Password: 'xxxx', Name: 'xxxx', Email: 'xxxx' };
                return obj;
            }
            catch (ex)
            {
                console.log(ex);
                return null;
            }
        }

        function lastWord(words)
        {
            var n = words.split(" ");
            return n[n.length - 1];
        }

        function firstWord(words)
        {
            var n = words.split(" ");
            return n[0];
        }

        function getChatPhrases(id)
        {
            try
            {
                var jsn = $('#hdnUpdatedPhrases').val();

                var strChatPhrases = jsn;
                var jsonChatPhrases = JSON.parse(strChatPhrases);

                if (jsonChatPhrases.length > 0)
                {
                    for (var i = 0; i < jsonChatPhrases.length; i++)
                    {
                        if (jsonChatPhrases[i].id == id)
                        {
                            return jsonChatPhrases[i].txt;
                            break;
                        }
                    }
                    return null;
                }
            }
            catch (ex)
            {
                console.log(ex);
                return null;
            }
        }

        $("#wndFBFriends").bind('mousewheel DOMMouseScroll', function (event)
        {
            if (event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0)
            {
                //scrolling up
                clearTimeout(fbScroll);
            }
            else
            {
                //scrolling down
                clearTimeout(fbScroll);
            }
        });

        function Recall(Val)
        {
            if (Val == -1)
            {
              //HR   //var Addres = document.getElementById("<%=txtAddress.ClientID %>");//document.getElementById("txtAddress");
                //Addres.style.display = "block"
            }
            else
            {
                //HR
                //var txtAddres = document.getElementById("<%=txtAddress.ClientID %>");
                //txtAddres.style.display = "none"
            }
        }


        function keepScrolling()
        {
            try
            {
                if ($('#ulShowFBFriends').height() >= fbScrollConstant)
                {
                    fbScrollConstant = fbScrollConstant + $("#wndFBFriends").height();
                }
                else
                {
                    fbScrollConstant = 0;
                }
                $("#wndFBFriends").animate({ scrollTop: fbScrollConstant }, 1000);
                clearTimeout(fbScroll);
                fbScroll = setTimeout(function () { keepScrolling(); }, 5000);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function setpositionAndshow()
        {
            try
            {
                if ($('#ulShowFBFriends li').length > 0)
                {
                    //var theChatWindow = $('div[id*="rdChatWindow"].RadWindow.RadWindow_Default.rwShadow');
                    $('#wndFBFriends').css({
                        'display': 'inline-block'
                        //,'left': parseInt(theChatWindow.offset().left) + parseInt(theChatWindow.width() + 15)
                        //,'top': parseInt(theChatWindow.offset().top)
                        //,'height': parseInt(theChatWindow.height() + 2)
                    });
                    $('#dvChatBox').css('width', '70%');
                    //$('div[id*="rdChatWindow"].RadWindow.RadWindow_Default').addClass('setMinWidthForChat');
                    if ((typeof chatVE !== "undefined"))
                    {
                        $('.magiChattingLeftWrapper').css('width', '75%');
                    }
                }
                else
                {
                    $('.magiChattingLeftWrapper').css('width', '100%');
                    if ((typeof chatVE !== "undefined"))
                    {
                        $('#dvChatBox').css('width', '100%');
                    }
                }
                setWindowWidth();
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function ClickMessengerIcon()
        {
            $('#messengerAction').click();
            scrollToBottom();
        }

        function showChatWindowNow()
        {
            ClickMessengerIcon();
            setNewToTop();

            if (typeof closeAllWindow === 'function')
            {
                closeAllWindow(null);
            }
        }

        function setAndShowByObject(objectForInfo, event, isOnline)
        {
            try
            {
                var img = objectForInfo.img;
                var name = objectForInfo.name;
                var title = objectForInfo.JobTitle;
                var bio = objectForInfo.bio;
                var dept = objectForInfo.dept;
                var org = objectForInfo.org;

                $('#imgProfilePicForVE').prop('src', img);
                $('#txtHeading').html(name);
                $('#txtOnlineStatus').html(isOnline == "1" ? "Online" : "Offline");
                $('#txtJobForVE').html(title);
                $('#txtTempBioForVE').html(bio);
                $('#txtDeptForVE').html(dept);
                $('#txtOrgForVE').html(org);

                $('#myPopupForVE').css('display', 'inline-block');
                var popupHeight = parseInt($('#myPopupForVE').height());
                var popupWidth = parseInt($('#myPopupForVE').width());

                $('#myPopupForVE').css({
                    'top':
                        (
                            ((event.pageY + 10 + popupHeight) > $(window).height()) ?
                                ((event.pageY - popupHeight - 10) < 0 ? 0 : (event.pageY - popupHeight - 10)) :
                                (event.pageY + 10)
                        ),
                    'left':
                        (
                            parseInt($('#ulChatListLeftPanel').offset().left) + $('#ulChatListLeftPanel').width()
                        )
                });
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function setAndShow(ele, showThisInfo, event, isVE)
        {
            try
            {
                if (showThisInfo)
                {
                    var img = $(ele).attr('dataimg');
                    var name = $(ele).attr('dataname');
                    var title = $(ele).attr('datatitle');
                    var bio = $(ele).attr('databio');
                    var dept = $(ele).attr('datadept');
                    var org = $(ele).attr('dataorg');
                    var isOnline = $(ele).attr('isonline');

                    $('#imgProfilePicForVE').prop('src', img);
                    //$('#txtNameForVE').html(name);
                    $('#txtHeading').html(name);
                    $('#txtOnlineStatus').html(isOnline == "1" ? "Online" : "Offline");
                    $('#txtJobForVE').html(title);
                    $('#txtTempBioForVE').html(bio);
                    $('#txtDeptForVE').html(dept);
                    $('#txtOrgForVE').html(org);

                    $('#myPopupForVE').css('display', 'inline-block');
                    var popupHeight = parseInt($('#myPopupForVE').height());
                    var popupWidth = parseInt($('#myPopupForVE').width());

                    if (isVE)
                    {
                        $('#myPopupForVE').css({
                            'top':
                                (
                                    ((event.pageY + 10 + popupHeight) > $(window).height()) ?
                                        ((event.pageY - popupHeight - 10) < 0 ? 0 : (event.pageY - popupHeight - 10)) :
                                        (event.pageY + 10)
                                ),
                            'left':
                                (
                                    (parseInt($('ul#ulChatList').offset().left) < popupWidth) ?
                                        (parseInt($('ul#ulChatList').offset().left) + $('ul#ulChatList').width() + 30)
                                        : (parseInt($('ul#ulChatList').offset().left) - popupWidth - 30)
                                )
                        });
                    }
                    else
                    {
                        $('#myPopupForVE').css({
                            'top':
                                (
                                    ((event.pageY + 10 + popupHeight) > $(window).height()) ?
                                        ((event.pageY - popupHeight - 10) < 0 ? 0 : (event.pageY - popupHeight - 10)) :
                                        (event.pageY + 10)
                                ),
                            'left':
                                (
                                    parseInt($('#ulShowFBFriends').offset().left) - popupWidth - 30
                                )
                        });
                    }
                }
                else
                {
                    $('#myPopupForVE').css('display', 'none');
                }
            }
            catch (ex)
            {
                console.log(ex);
            }
        }
        function characterCounter(ObjID, ID)
        {

            var maxCharlimit = ObjID.maxLength;

            if (ID == 0)
            {
                var txtCommentHIS = document.getElementById(ObjID.id);
                //HR
                //var lbldisplay = document.getElementById('<%=lblCount.ClientID%>');
                //lbldisplay.innerHTML = (txtCommentHIS.value.length) + ' of ' + maxCharlimit + ' Characters used';
            }

            return false;

        }

        function getEventOrganizationkey()
        {
            var value = $('#hdnForEventOrganizationkey').val();
            return (IsNotUndefinedAndAlsoNotNull(value) ? value : '0');
        }
</script>
}

<!---------Common CSS Starts here-------------------->
<style>
    .clsheader h4
    {
        font-weight: 400;
        margin: 0;
        padding: 0;
        float: left;
        color: white;
        font-size: 16px;
    }

    .clsheader
    {
        display: inline-block;
        width: -webkit-fill-available;
        width: -moz-available;
        padding: 2px 10px;
        background-color: #1e90ff !important;
        border-left-color: #1e90ff !important;
    }

    #exampleModal
    {
        z-index: 999999999;
    }

    #wndBroadCardMsg, #windowCrisisMsg
    {
        width: 600px;
        height: auto;
        position: absolute;
        left: 50%;
        top: 30%;
        margin-left: -300px;
        background-color: #ffffff;
        border: 2px black solid;
        border-radius: 6px;
        padding: 10px;
    }

    #windowCrisisMsg
    {
        margin-top: -270px;
        top: 50%;
    }

    #dvAdminNotification, #dvCrisisNotification
    {
        display: none;
        position: fixed;
        background-color: rgba(170, 170, 170,0.7);
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        height: 100%;
        width: 100%;
        z-index: 999999999999999 !important;
    }

    #txtBroadCardMsg, #txtCrisisMsg
    {
        font-family: 'Segoe UI',Tahoma,Geneva,Verdana,sans-serif;
        margin: 0;
        padding: 0;
        padding-left: 5px;
    }

    #titleForTheCrisis
    {
        font-weight: 600 !important;
    }

    #txtCrisisMsg
    {
        max-height: 400px;
        overflow-y: auto;
    }

    #reply-section
    {
        width: 100%;
    }

    #btnReplyToAll, #btnReplyToSender, #reply-section
    {
        display: none;
    }

    input[type=button]
    {
        cursor: pointer;
    }
</style>
<!---------Common CSS Ends here-------------------->
<!---------Common Design Starts here-------------------->

<div id="dvCrisisNotification">
    <div id="windowCrisisMsg">
        <div style="width: -webkit-fill-available;background:red !important;" class="clsheader">
            <h4 id="titleForTheCrisis"></h4>
        </div>
        <div style="display: inline-block; width: 100%;">
            <pre id="txtCrisisMsg">
            </pre>
        </div>
        <div id="reply-section">
            <textarea id="txtCrisisReply" class="Font11 txtRequired" rows="4" type="text" min="0" maxlength="1000"></textarea>
        </div>
        <div style="display: inline-block; width: 100%; padding-top: 10px;">
            <input type="button" id="btnReplyToSender" class="btnOrange" onclick="CrisisReplySender()" value="Reply to Sender">
            <input type="button" id="btnReplyToAll" class="btnOrange" onclick="CrisisReplyAll()" value="Reply to All">

            <input type="button" id="btnReplyToCrisis" class="btnOrange" onclick="replyToCrisis(true)" value="Reply">
            <input type="button" style="float:right" class="btnSmall" onclick="closeCrisis()" value="Close">
        </div>
    </div>
</div>

<div id="dvAdminNotification">
    <div id="wndBroadCardMsg">
        <div style="width: -webkit-fill-available;" class="clsheader">
            <h4>Message from MAGI</h4>
        </div>
        <div id="showWndBroadCard" style="display: inline-block; width: 100%;">
            <p id="txtBroadCardMsg"></p>
        </div>
        <div style="display: inline-block; width: 100%; text-align: center; padding-top: 10px;">
            <input type="button" class="btnSmall" onclick="closeBroadcast()" value="OK">
        </div>
    </div>
</div>
<!---------Common Design Ends here-------------------->
<!---------Common Script starts here-------------------->
<script>
    function loadjscssfile(filename, filetype)
    {
        if (filetype == "js")
        {
            var fileref = document.createElement('script')
            fileref.setAttribute("type", "text/javascript")
            fileref.setAttribute("src", filename)
        }
        else if (filetype == "css")
        {
            var fileref = document.createElement("link")
            fileref.setAttribute("rel", "stylesheet")
            fileref.setAttribute("type", "text/css")
            fileref.setAttribute("href", filename)
        }

        if (typeof fileref != "undefined")
            document.getElementsByTagName("head")[0].appendChild(fileref)
    }

    function createGuid()
    {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c)
        {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    function showChatWithSuggestion()
    {
        try
        {
            if (typeof opentheChat === 'function')
            {
                refreshSuggestedPeople();
                opentheChat();
            }
            else
                alertify.alert('Sorry, Chat has been disabled for this event for now');
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function IsNotUndefinedAndAlsoNotNull(type)
    {
        return (typeof type !== 'undefined' && type !== undefined && type !== null && type !== '');
    }

    function btnDelete_clientclick(cntrl)
    {
        alertify.confirm('Confirm deletion', function (e)
        {
            if (e)
            {
                var pkey = cntrl.attr('datatextpkey');
                var para = { key:pkey };

                CommonFunctions.AjaxasyncCall("GET",
                    '/Operations/DeleteThisPhrase',
                    para, "JSON",
                    callBackDelete, "");
            }
        });
    }

    function callBackDelete(data)
    {
        try
        {
            if (data.msg == "OK")
                showPhrases();
            else
            {
                CommonFunctions.Alert(data.msg);
            }
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function btnUseThis_clientclick(cntrl)
    {
        try
        {
            var txtPhrases = $(cntrl).closest('tr').find('.clsPhrasesText').html();
            var sentence = $('#message').val();//HR $('.emoji-wysiwyg-editor.mytext').html();
            sentence = sentence + ' ' + txtPhrases;
            setTextInEntry(sentence);
            //HR placeCaretAtEnd(document.querySelector('.emoji-wysiwyg-editor.mytext'));
            placeCaretAtEnd(document.querySelector('#message'));
            ClosePhrasesWindow();
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function ShowMsgForValidations(msg)
    {
        alertify.alert(msg);
    }

    function characterCounterForPhrases()
    {
        var lbldisplay = document.getElementById('lbltxtPhrasedisplay');
        var textControl = $('#txtPhraseText');
        lbldisplay.innerHTML = (textControl.val().length).toLocaleString() + ' of 8000 Characters used';
    }

    function editThisPhrase(obj)
    {
        try
        {
            var pkey = obj.attr('datatextpkey');
            var isglobal = obj.attr('isglobal');
            var keyAndText = searchAndGetPhrase(pkey);

            if (keyAndText != 'undefined' && keyAndText != null)
            {
                var textControl = $('#txtPhraseText');
                if (isglobal == "0")
                {
                    $('#hdnID').val(pkey);
                }
                else
                {
                    $('#hdnGlobalPhrsID').val(pkey);
                }

                $('#txtKey').val(keyAndText.EditId);
                textControl.val(keyAndText.txt);

                characterCounterForPhrases();
            }
            $('#btnSavePhrase').val('Update');
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function getInSession()
    {
        var res = $('#hValueForSession').val();
        res = IsNotUndefined(res) ? res : 0;
        return res;
    }

    function searchAndGetPhrase(searchedPkey)
    {
        try
        {
            var strJson = $('#hdnUpdatedPhrases').val();
            var phrsJson = JSON.parse(strJson);

            for (var i = 0; i < phrsJson.length; i++)
            {
                if (phrsJson[i].pkey.toString() == searchedPkey.toString())
                {
                    return phrsJson[i];
                }
            }
        }
        catch (ex)
        {
            console.log(ex);
            return null;
        }
    }

    function isNotNullOrEmpty(obj)
    {
        return (IsNotUndefined(obj) && obj != null && obj != '');
    }

    function CheckValidationsForPhrases()
    {
        try
        {
            //HR
            //var keyVal = ($find('<%=txtKey.ClientID%>')).get_value();
            //var phrasesVal = ($find('<%=txtPhraseText.ClientID%>')).get_value();

            //if (isNotNullOrEmpty(keyVal) && isNotNullOrEmpty(phrasesVal))
            //{
            //    $("#phrsValidationTxt").html('');
            //    return true;
            //}
            //else if (!isNotNullOrEmpty(keyVal) && !isNotNullOrEmpty(phrasesVal))
            //{
            //    $("#phrsValidationTxt").html('Enter code and phrase or click Close button');
            //    return false;
            //}
            //else if (!isNotNullOrEmpty(keyVal))
            //{
            //    $("#phrsValidationTxt").html('Code is mandatory');
            //    return false;
            //}
            //else if (!isNotNullOrEmpty(phrasesVal))
            //{
            //    $("#phrsValidationTxt").html('Phrase is mandatory');
            //    return false;
            //}
        }
        catch (ex)
        {
            console.log(ex);
            return false;
        }
    }

    function closeThisChat()
    {
        try
        {
            $('#closeIframeVideo').click();
            setCookieForChat("chatopened", "0");
            $('#rapidFireWindow').slideUp(100);
            return false;
        }
        catch (ex)
        {
            console.log(ex);
        }
        return false;
    }

    function showWiningWheel(show)
    {
        try
        {
            //HR
            //var window = $find('<%=rdSpinAndWin.ClientID%>');

            //if (show)
            //{
            //    window.setUrl("/SpinTheWheel");
            //    window.show();
            //}
            //else
            //    window.close();
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function showPhrasesList(data)
    {
        if (data.isError)
        {
            CommonFunctions.Alert(data.msg);
        }
        else if (!data.isError)
        {
            if (data.notFound)
            {
                CommonFunctions.Alert("Data not found!");
            }
            else
            {
                var contentOfBody = '';
                $('table#MyPhrases tbody').empty();
                $(data.data).each(function (i, o)
                {
                    contentOfBody += `<tr>`;
                    contentOfBody += `<td>` + `<img height="20px" width="20px"
                                        onclick="editThisPhrase($(this));" title="Edit"
                                        datatextpkey="` + o.pkey + `" isglobal="` + (o.isGlobal ? `1` : `0`) + `"
                                        src="/images/icons/gridgray.png" class="cursorAsPointer" /></td>`;
                    contentOfBody += `<td><span>` + o.id + `</span></td>`;
                    contentOfBody += `<td><span class="clsPhrasesText">` + o.txt + `</span></td>`;

                    contentOfBody += `<td><input type="image" src="/images/icons/use.png"
                                        style="float: left" height="20px"
                                        title="Insert in Chat"
                                        onclick="btnUseThis_clientclick($(this));
                                        return false;" tabindex="-1"></td>`;

                    contentOfBody += `<td><input type="image" src="/images/icons/redcross.png"
                                    style="float: right" height="13px" title="Delete" datatextpkey="` + o.pkey + `"
                                    onclick="btnDelete_clientclick($(this)); return false;" /></td>`;

                    contentOfBody += `</tr>`;
                });

                $('table#MyPhrases tbody').append(contentOfBody);
                $('#btnSavePhrase').val('Save');
                $('#hdnUpdatedPhrases').val(data.jsonTable);

                ShowPhrasesWindow();
            }
        }
    }

    function ClientSavePhrases()
    {
        try
        {
            var data = {
                key: $('#txtKey').val(),
                value: $('#txtPhraseText').val(),
                pkey: $('#hdnID').val(),
                globalPkey: $('#hdnGlobalPhrsID').val()
            };

            CommonFunctions.AjaxasyncCall("GET",
                '/Operations/SavePhrase',
                data, "JSON",
                SavePhrasesCallBack, "");
        }
        catch (ex)
        {
            console.log(ex);
            return false;
        }
    }

    function SavePhrasesCallBack(data)
    {
        try
        {
            if (data.msg == "OK")
                showPhrases();
            else
                CommonFunctions.Alert(data.msg);
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function showPhrases()
    {
        try
        {
            CommonFunctions.AjaxasyncCall("GET",
                '/Operations/GetPhrases',
                null, "JSON",
                showPhrasesList, "");
        }
        catch (ex)
        {
            console.log(ex);
            return false;
        }
    }

    function showBioForThisPerson()
    {
        try
        {
            var params = { myId:getSelfConnectionId(), userId:getReceiverId(), eventKey:getCurrentEvent()};
            CommonFunctions.AjaxasyncCall("GET",
                '/Operations/GetBioForThisPerson',
                params, "JSON",
                showBioForThisPersonCallBack, "");
        }
        catch (ex)
        {
            console.log(ex);
            return false;
        }
    }

    function showBioForThisPersonCallBack(d)
    {
        try
        {
            if (d.notFound)
                CommonFunctions.Alert('No bio available for this person');
            else
            {
                $('#txtBio').html(d.data.strBio);
                if (d.data.topImage != '')
                {
                    var ImagePath = (isNotNullOrEmpty(d.data.topImage) ? d.data.topImage.replace('~', '') : '');
                    $('#bioImg').css('background-image', 'url(' + ImagePath + ')');
                }

                $('#hBioHeader').html(d.data.strHeader);
                $('#bioJobTitle').html(d.data.strJobTitle);
                $('#bioOrg').html(d.data.strOrg);
                $('#bioLocation').html(d.data.strAddress);
                $('#lblConnectionStatus').html('');

                try
                {
                    var titleOfConnection = '';
                    if (d.data.conStatus == null || !IsNotUndefined(d.data.conStatus) || d.data.conStatus.connStatus == null)
                    {
                        titleOfConnection = 'Request Connection';
                    }
                    else if (d.data.conStatus.connStatus.st == '0')
                    {
                        if (d.data.conStatus.connStatus.isExpired)
                        {
                            titleOfConnection = "Connection Expired - Request Connection Again";
                        }
                        else
                        {
                            if (d.data.conStatus.connStatus.fromMe)
                            {
                                titleOfConnection = "Connection Requested by Me";
                            }
                            else
                            {
                                titleOfConnection = "Connection Requested by " + ($('a#' + rID + '_1 span.magiVirtualCatListName').html());
                            }
                        }
                    }
                    else if (d.data.conStatus.connStatus.st == '1')
                    {
                        titleOfConnection = "Connected";
                    }
                    else if (d.data.conStatus.connStatus.st == '2')
                    {
                        if (d.data.conStatus.connStatus.fromMe)
                        {
                            if (d.data.conStatus.connStatus.refusedByOwn)
                            {
                                titleOfConnection = 'I Retracted Connection Request';
                            }
                            else
                            {
                                titleOfConnection = 'Connection Requested by Me';
                            }
                        }
                        else
                        {
                            if (d.data.conStatus.connStatus.refusedByOwn)
                            {
                                titleOfConnection = 'Connection Retracted by ' + ($('a#' + rID + '_1 span.magiVirtualCatListName').html());
                            }
                            else
                            {
                                titleOfConnection = 'Connection Declined by Me';
                            }
                        }
                    }
                    else if (d.data.conStatus.connStatus.st == '3')
                    {
                        if (d.data.conStatus.connStatus.fromMe == true)
                        {
                            titleOfConnection = 'Connection Requested by Me';
                        }
                        else
                        {
                            titleOfConnection = "Ignored by Me";
                        }
                    }

                    $('#lblConnectionStatus').html(titleOfConnection);
                }
                catch (ex)
                {
                    console.log(ex);
                }

                showWindowForBIO();
            }
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function ShowPhrasesWindow()
    {
        $('#windowForPhrases').modal('show');
        $('#txtKey').val(null);
        $('#txtPhraseText').val(null);
        $('#hdnID').val(null);
        $('#hdnGlobalPhrsID').val(null);
        $('#lbltxtPhrasedisplay').html('&nbsp;');
    }

    function showWindowForBIO()
    {
        $('#windowForBIO').modal('show');
    }

    function ClosePhrasesWindow()
    {
        try
        {
            $('#windowForPhrases').modal('hide');
            return false;
        }
        catch (ex)
        {
            console.log(ex);
        }
        return false;
    }

    function closeBroadcast()
    {
        $('#dvAdminNotification').fadeOut(300);
    }

    function CrisisReplySender()
    {
        var txtCrisisReply = $('#txtCrisisReply');
        var strBody = txtCrisisReply.val();

        if (strBody == null || strBody == '')
        {
            alertify.alert('Please enter text to reply');
            return;
        }

        var strTitle = $('#titleForTheCrisis').html();
        sendCrisis(strTitle, $('#txtCrisisMsg').html(), crisisThread, crisisRaisedBy, 1, strBody, 0);
        prepareReplySection(false);
        closeCrisis();
        replyToCrisis(false);
        alertify.alert('Reply Sent');
    }

    function CrisisReplyAll()
    {
        var txtCrisisReply = $('#txtCrisisReply');
        var strBody = txtCrisisReply.val();

        if (strBody == null || strBody == '')
        {
            alertify.alert('Please enter text to reply');
            return;
        }

        var strTitle = $('#titleForTheCrisis').html();
        sendCrisis(strTitle, $('#txtCrisisMsg').html(), crisisThread, crisisRaisedBy, 1, strBody, 1);
        prepareReplySection(false);
        closeCrisis();
        replyToCrisis(false);
        alertify.alert('Reply Sent');
    }

    function replyToCrisis(val)
    {
        if (val)
        {
            $('#btnReplyToAll, #btnReplyToSender').slideDown(300);
            $('#btnReplyToCrisis').slideUp(300);
        }
        else
        {
            $('#btnReplyToAll, #btnReplyToSender').slideUp(300);
            $('#btnReplyToCrisis').slideUp(300);
        }

        prepareReplySection(val);
    }

    function prepareReplySection(val)
    {
        try
        {
            var txtCrisisReply = $('#txtCrisisReply');
            txtCrisisReply.val('');

            if (val)
                $('#reply-section').slideDown(300);
            else
                $('#reply-section').slideUp(300);
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function closeCrisis()
    {
        $('#dvCrisisNotification').fadeOut(300);
    }

    function getSelfConnectionId()
    {
        var id = "@Model.MyID";
        return id;
    }

    function GetValueByQueryString(para)
    {
        try
        {
            var urlParams = new URLSearchParams(window.location.search.toUpperCase());
            var paraNeedToCheck = urlParams.get(para);
            return IsNotUndefinedAndAlsoNotNull(paraNeedToCheck) ? paraNeedToCheck : '';
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function viewingOthersChat()
    {
        try
        {
            if (typeof getSelectedSponsor === 'function')
            {
                //HR
                //var val = getSelectedSponsor();
                //if (val != null && val != '')
                //    return (val != "<%=fcConferenceManager.clsChatwee.strChatID()%>");
            }

            return false;
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function CelebrateShort()
    {
        try
        {
            var sound = document.getElementById('NewPointsSoundShort');
            sound.volume = 0.2;
            sound.play();
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function Celebrate(type, NetLevel = 0, strMsg = '')
    {
        try
        {
            if (type == 1)
            {
                var sound = document.getElementById('NewPointsSound');
                sound.volume = 0.2;
                sound.play();
            }
            else if (type == 2)
            {
                var sound = document.getElementById('NewLevelAttainedSound');
                sound.volume = 0.2;
                sound.play();

                showCanvasCelebration(NetLevel, strMsg);
            }
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function showCanvasCelebration(NetLevel, strMsg)
    {
        $('#canvasSectionForCelebration').css('display', 'inline-block');
        InitiateCelebration();

        setTimeout(function ()
        {
            fadeOutCelebration();
            prepareWheelAndStartAnimation(NetLevel, strMsg);
        }, 7000);
    }

    function prepareWheelAndStartAnimation(NetLevel, strMsg)
    {
        //HR
        //$('#<%=btnAssignSessionAndGo.ClientID%>').prop('disabled', false);
        //$('#<%=hSpinningKey.ClientID%>').val(NetLevel);
        //$('#hNetworkingLevelText').html(strMsg);
        //$('#<%=btnAssignSessionAndGo.ClientID%>').click();
    }

    function fadeOutCelebration()
    {
        $('#canvasSectionForCelebration').fadeOut(1000);
    }

    function getCurrentEvent()
    {
        var currEvent = "@Model.EventID";
        return currEvent;
    }

    function getActiveEvent()
    {
        var activeEvent = "@Model.ActiveEventID";
        return activeEvent;
    }

    function getOptOut()
    {
        try
        {
            //if (typeof entirelyOut === "undefined")
            //{
            //    return <%=IsOptOut ? "true" : "false" %>;
            //}
            //else if (typeof entirelyOut === "boolean")
            //{
            //    return entirelyOut;
            //}
        }
        catch (ex)
        {
            console.log(ex);
            return false;
        }
        return false;
    }

    function getLastDateOfEvent()
    {
        var val = '@Model.LastDateOfEvent';
        return val;
    }

    function getStandardTimeCode()
    {
        var value = '@Model.StandardTimeCode';
        return value;
    }

    function getMyName()
    {
        var nm = "@Model.Contactname";
        return nm;
    }

    function getMySession()
    {
        return "@Session.SessionID";
    }

    function isNotNullAndEmpty(txt)
    {
        return (txt != null && txt != '');
    }

    function CheckProgressInNetworkingLevel()
    {
        try
        {
            if (!location.pathname.toUpperCase().includes('ZOOMSESSION') &&
                getInSession() == 0 &&
                $('div[id*=ddVirtual].clsSpinningAllowance').length > 0)
            {
                chat.server.setNotified(getSelfConnectionId(),
                    getCurrentEvent()
                    , @Model.NetworkingLevelDetails[3] );
            }
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function sendCrisis(strTitle, strBody, crisisTh, didToWhom, replied = 0, strReplied = '', sendToAll = 0)
    {
        try
        {
            if (crisisTh == '' || crisisTh == null)
                crisisTh = createGuid();

            chat.server.crisisAlert(strTitle, strBody, getSelfConnectionId(), crisisTh, didToWhom, getCurrentEvent(), replied, strReplied, sendToAll);
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function updateConnectionIconsForPnl()
    {
        var overAllPeopleIds = '';
        $('ul#ulChatList li').each(function (i, o)
        {
            if (overAllPeopleIds == '')
                overAllPeopleIds = o.attr('data-key');
            else
                overAllPeopleIds = ',' + o.attr('data-key');
        });
        chat.server.updateConnectionIconsForPnl(overAllPeopleIds);
    }

    function IsNotUndefined(type)
    {
        return type !== 'undefined';
    }

    /////////cookies ................
    function setCookieForChat(cname, cvalue)
    {
        var d = new Date();
        d.setTime(d.getTime() + (1 * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toGMTString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    function getCookie(cname)
    {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++)
        {
            var c = ca[i];
            while (c.charAt(0) == ' ')
            {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0)
            {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function playSoundForNtimes(n)
    {
        try
        {
            var counter = 1;
            var z = setInterval(function ()
            {
                Celebrate(1);

                if (counter == n)
                {
                    clearInterval(z);
                }

                counter++;
            }, 1000);
        }
        catch (ex)
        {
            console.log(ex);
        }
    }

    function SoundForPoints(n)
    {
        if (typeof playSoundForNtimes === 'function')
        {
            //playSoundForNtimes(n);
            playSoundForNtimes(1);
        }
    }

    $(document).ready(function ()
    {
        if (typeof hideChatMenu === 'function')
        {
            hideChatMenu(false);
            $(`li.hide-radio span:contains('My Chats')`).closest('li').hide();
        }
    });
</script>
<!---------Common Script ends here-------------------->

@if (!Model.ChatEnabled)
{
    <script type="text/javascript">
        var chat = $.connection.localHub;
        var currIP = '';
        $.connection.hub.transportConnectTimeout = 3000;
        $.connection.hub.logging = true;

        var crisisRaisedBy = 0;
        var crisisThread = '';

        $(document).ready(function ()
        {
            $.connection.hub.disconnected(function ()
            {
                if ($.connection.hub.lastError)
                {
                    console.log("You has been disconnected. please refresh the page again");
                    console.log(new Date());
                }
                setTimeout(function ()
                {
                    $.connection.hub.start({ transport: ['serverSentEvents', 'foreverFrame', 'longPolling', 'webSockets'] }).done(function ()
                    {
                        console.log("Connected, transport = " + $.connection.hub.transport.name);
                        var userId = getSelfConnectionId();
                        var name = getMyName();
                        var uri = window.location.pathname;
                        chat.server.onconnected(userId, getMySession(), name, uri, false,
                            "@Model.EventID");
                        console.log(new Date());

                    }).fail(function (e) { console.log("Not Connected, transport error occurred."); });

                }, 5000);// Restart connection after 5 seconds.
            });

            chat.client.updateSender = function (usr, json, myIP)
            {
                try
                {
                    if (usr != null)
                    {
                        $('#hclsAvatarSndr').val(usr.img.replace('~', ''));
                        currIP = usr.ipAddress.toString();
                    }
                    //console.log(json);
                    console.log(currIP + "~" + myIP);
                    chat.client.matchIPAdress(getSelfConnectionId(), myIP);

                    CheckProgressInNetworkingLevel();
                    //if (location.pathname.toUpperCase().includes('NETWORKINGMODEL'))
                    //    NetworkingLevelOperation();
                }
                catch (ex)
                {
                    console.log(ex);
                }
            };

            chat.client.customMsg = function (msg)
            {
                alertify.alert(msg);
            }

            chat.client.takeToMeeting = function (url)
            {
                window.open(url, "ZoomMeeting");
            }

            chat.client.showchatinListCall = function (Conversations)
            {
                if (typeof showchatinList === 'function')
                    showchatinList(Conversations);
                //else
                //    alertify.alert('Unable to show chat');
            };

            chat.client.customMsgOnTheBaseOfPage = function (pageName, msg)
            {
                if (location.pathname.includes(pageName))
                    alertify.alert(msg);
            }

            chat.client.adminBroadcast = function (strMsg, bKey)
            {
                var intAccKey = parseInt(getSelfConnectionId());
                if (intAccKey > 0)
                {
                    $('#dvAdminNotification').fadeIn(300);
                    $('#txtBroadCardMsg').html(strMsg);
                    ///////////Acknoledge Back to DB
                    chat.server.broadcastAcknoledged(getSelfConnectionId(), bKey);
                }
            }

            chat.client.showError = function (ErrorMsg)
            {
                console.log(ErrorMsg);
            };

            chat.client.showAlternateMsg = function (strMsg)
            {
                alertify.alert(strMsg);
            }

            chat.client.celebrateSound = function (type, NetLevel, strMsg)
            {
                Celebrate(type, NetLevel, strMsg);
            }

            chat.client.crisisAlertOnClient = function (strTitle, strBody, didBy, crThread, crKey, replied)
            {
                var intAccKey = parseInt(getSelfConnectionId());
                if (intAccKey > 0)
                {
                    $('#dvCrisisNotification').fadeIn(300);

                    if (replied == 1)
                        $('#titleForTheCrisis').html(strTitle);
                    else
                        $('#titleForTheCrisis').html('CRISIS ALERT' + (isNotNullAndEmpty(strTitle) ? '(' + strTitle + ')' : ''));

                    $('#txtCrisisMsg').html(strBody);

                    if (isNotNullAndEmpty(crisisThread) && crisisThread != crThread)
                    {
                        $('#btnReplyToAll, #btnReplyToSender').slideUp(300);
                        $('#btnReplyToCrisis').slideDown(300);
                    }
                    crisisRaisedBy = didBy;
                    crisisThread = crThread;
                    ///////////Acknoledge Back to DB
                    chat.server.crisisAcknoledged(getSelfConnectionId(), crKey);
                }
            }

            chat.client.openThisSessionForAll = function (sessionID)
            {
                if (location.pathname.toUpperCase().includes('VIEWMYSCHEDULE'))
                {
                    var path = 'virtualevent.aspx?ESPK=' + $('div[data-session=' + sessionID + ']').attr('data-key').toString();
                    var btnJoinSession = $('<input/>', {
                        type: 'image',
                        title: 'Attend session',
                        alt: 'Attend session',
                        src: '../images/icons/laptop.jpg',
                        class: 'animateClass',
                        style: 'Vertical-align:middle;width:16px;height:16px',
                        onclick: 'redirectTo("' + path + '");'
                    });

                    $('div[data-session=' + sessionID + '] input').remove();
                    $('div[data-session=' + sessionID + ']').append(btnJoinSession);
                }
            }

            chat.client.matchIPAdress = function (paraUID, paraIP)
            {
                if (paraUID == getSelfConnectionId() && paraIP != '' && currIP != '' && paraIP != currIP)
                {
                    //alertify.alert("Only attendees may attend or watch sessions. Signed out because you signed with another device.");
                    //$('input[id*=cLogOut]').click();
                    console.log('IP Issue');
                }
            }

            //$.connection.hub.start().done(function ()
            $.connection.hub.start({ transport: ['serverSentEvents', 'foreverFrame', 'longPolling', 'webSockets'] }).done(function ()
            {
                console.log("Connected, transport = " + $.connection.hub.transport.name);
                var userId = getSelfConnectionId();
                var name = getMyName();

                var uri = window.location.pathname;
                chat.server.onconnected(userId, getMySession(), name, uri, true,
                    "@Model.EventID");
                console.log(new Date());

            }).fail(function (e) { console.log("Not Connected, transport error occurred."); });
        });

        function OpenChat(userchatId, name, ChatType, msgTxt = '')
        {
            if (getOptOut())
            {
                alertify.alert("You have choosen to be out of networking options entirely");
                return false;
            }

            if (typeof OpenMyChat === 'function')
            {
                if (parseInt(getCurrentEvent()) == parseInt(getActiveEvent()))
                {
                    OpenMyChat(userchatId, name, ChatType, 0, '', msgTxt);
                    return true;
                }
                else
                {
                    alertify.alert('Active event and selected event are not same.');
                    return false;
                }
            }
            else
                alertify.alert('Sorry, Chat has been disabled for this event for now');

            return false;
        }

        function broadCastMyMessage(id, txtmessage, forstaffOnly)
        {
            try
            {
                chat.server.broadcastThisText(id, txtmessage, forstaffOnly);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function broadCastThisSession(strSession, openSessionDurationValue)
        {
            try
            {
                chat.server.openSessionForAll(getSelfConnectionId(), strSession, openSessionDurationValue);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }

        function openMyVideoChat(urlkey)
        {
            try
            {
                chat.server.openVideoChat(getSelfConnectionId(), getActiveEvent(), urlkey);
            }
            catch (ex)
            {
                console.log(ex);
            }
        }
    </script>
}